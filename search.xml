<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+NexT搭建个人博客</title>
    <url>/2020/05/07/Hexo-NexT%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>安装 Hexo 前要先安装：</p>
<ul>
<li>Node.js</li>
<li>Git<a id="more"></a>


</li>
</ul>
<h2 id="在GitHub-上搭建个人博客"><a href="#在GitHub-上搭建个人博客" class="headerlink" title="在GitHub 上搭建个人博客"></a>在GitHub 上搭建个人博客</h2><h3 id="GitHub创建仓库"><a href="#GitHub创建仓库" class="headerlink" title="GitHub创建仓库"></a>GitHub创建仓库</h3><p>新建一个名为<code>用户名.github.io</code>的仓库，如<code>CloudMadao.github.io</code>,以后可以通过<a href="https://CloudMadao.github.io" target="_blank" rel="noopener">https://CloudMadao.github.io</a> 访问自己的个人博客。</p>
<p>注意：仓库中的用户名对大小写敏感</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>

<h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><p>进入博客文件夹(CloudMadao)，执行如下命令进行初始化：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd D:/CloudMadao</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>执行初始化命令之后Hexo会下载一些文件到这个文件夹下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-rw-r--r-- 1 admin 197121  2468  5月  7 13:59 _config.yml</span><br><span class="line">drwxr-xr-x 1 admin 197121     0  5月  7 14:01 node_modules/</span><br><span class="line">-rw-r--r-- 1 admin 197121   602  5月  7 13:59 package.json</span><br><span class="line">-rw-r--r-- 1 admin 197121 75419  5月  7 14:01 package-lock.json</span><br><span class="line">drwxr-xr-x 1 admin 197121     0  5月  7 13:59 scaffolds/</span><br><span class="line">drwxr-xr-x 1 admin 197121     0  5月  7 13:59 source/</span><br><span class="line">drwxr-xr-x 1 admin 197121     0  5月  7 13:59 themes/</span><br></pre></td></tr></table></figure>

<p>注意：hexo中存在两个<code>_config.yml</code>文件，一个存在于根目录CloudMadao下，称为<code>站点配置文件</code>，另一个存在于theme下，称为<code>主题配置文件</code></p>
<p>初始化Hexo之后即可以生成博客和预览博客</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g #生成</span><br><span class="line">hexo s #启动Hexo服务</span><br></pre></td></tr></table></figure>

<p>在本地启动Hexo服务之后，访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 可以看到初始化的博客内容。</p>
<h3 id="将博客部署到GitHub"><a href="#将博客部署到GitHub" class="headerlink" title="将博客部署到GitHub"></a>将博客部署到GitHub</h3><p>在站点配置文件<code>_config.yml</code>,中修改deploy部分：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">'git'</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/CloudMadao/CloudMadao.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>注意：配置文件为yaml格式，需要注意缩进</p>
<p>执行 <code>hexo d</code>将博客部署到GitHub，若是出现如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Deployer not found: git</span><br></pre></td></tr></table></figure>

<p>需要安装相关插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>将博客部署到GitHub上之后，访问<a href="https://cloudmadao.github.io/即可访问" target="_blank" rel="noopener">https://cloudmadao.github.io/即可访问</a></p>
<hr>
<h2 id="NexT主题配置"><a href="#NexT主题配置" class="headerlink" title="NexT主题配置"></a>NexT主题配置</h2><h3 id="设置hexo的next主题"><a href="#设置hexo的next主题" class="headerlink" title="设置hexo的next主题"></a>设置hexo的next主题</h3><p>将站点配置文件_config.xml中的theme: landscape改为theme: NexT</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">NexT</span> <span class="comment">#NexT为下载的next主题位置</span></span><br></pre></td></tr></table></figure>

<h3 id="配置网站相关信息"><a href="#配置网站相关信息" class="headerlink" title="配置网站相关信息"></a>配置网站相关信息</h3><p>修改站点配置文件<code>_config.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Madao's</span> <span class="string">Personal</span> <span class="string">Website</span>       <span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">'今天 &lt;s&gt;摸鱼&lt;/s&gt; 学习了吗'</span>  <span class="comment"># 网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">'Constant dropping wears the stone'</span>  <span class="comment"># 描述，介绍网站的</span></span><br><span class="line"><span class="attr">keywords:</span>       <span class="comment"># 网站的关键字</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">摸鱼选手Madao</span>  <span class="comment"># 博主姓名</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span> <span class="comment"># 语言：zh-CN 是简体中文</span></span><br><span class="line"><span class="attr">timezone:</span>   <span class="comment"># 时区</span></span><br></pre></td></tr></table></figure>

<p>修改主题配置文件<code>_config.yml</code>,使用nexT的Pisces主题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure>

<h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><h4 id="开启标签和分类页面："><a href="#开启标签和分类页面：" class="headerlink" title="开启标签和分类页面："></a>开启标签和分类页面：</h4><p>标签：</p>
<p>创建tags和页面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<p>修改tags中的<code>index.md</code>文件(categories类似)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2020-05-07 16:00:51</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h4 id="配置hexo本地搜索"><a href="#配置hexo本地搜索" class="headerlink" title="配置hexo本地搜索"></a>配置hexo本地搜索</h4><p>安装<code>hexo-generator-searchdb</code>插件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-generator</span><span class="literal">-searchdb</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure>

<p>修改站点配置文件<code>_config.yml</code>,添加如下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地搜索</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>

<p>修改主题配置文件<code>_config.yml</code>,开启<code>local_search</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#开启本地搜索</span></span><br></pre></td></tr></table></figure>

<h4 id="配置头像"><a href="#配置头像" class="headerlink" title="配置头像"></a>配置头像</h4><p>编辑主题配置文件<code>_config.yml</code>,修改其中的<code>avatar</code>字段</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将头像文件 Sakai Izumi2.png 放置在主题目录的source/images目录下</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/Sakai</span> <span class="string">Izumi2.png</span></span><br></pre></td></tr></table></figure>

<h4 id="配置社交链接"><a href="#配置社交链接" class="headerlink" title="配置社交链接"></a>配置社交链接</h4><p>修改主题配置文件中的Social字段，显示相关社交账号</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/example</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:example@hotmail.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br></pre></td></tr></table></figure>

<h4 id="首页博客显示摘要"><a href="#首页博客显示摘要" class="headerlink" title="首页博客显示摘要"></a>首页博客显示摘要</h4><p>NexT7.6之后移除了截断文章作为的摘要功能，现在我们可以通过<code>&lt;!--more--&gt;</code>来精确控制摘要的内容:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 2020.5.4 奇怪的知识增加了</span><br><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>

<p>添加<!--more-->之后，将会以该标签之前的文本作为摘要内容。</p>
<h4 id="页面阅读统计"><a href="#页面阅读统计" class="headerlink" title="页面阅读统计"></a>页面阅读统计</h4><p>修改主题配置文件<code>_config.yml</code>中的<code>busuanzi_count</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span>              <span class="comment"># 设true 开启</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span>       <span class="comment"># 总阅读人数（uv数）</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">user</span>  <span class="comment"># 阅读总人数的图标</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span>          <span class="comment"># 总阅读次数（pv数）</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">eye</span>      <span class="comment"># 阅读总次数的图标</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span>           <span class="comment"># 开启内容阅读次数</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">eye</span>       <span class="comment"># 内容页阅读数的图标</span></span><br></pre></td></tr></table></figure>

<h4 id="背景动画设置"><a href="#背景动画设置" class="headerlink" title="背景动画设置"></a>背景动画设置</h4><p><strong>Canvas-nest</strong></p>
<p>在站点目录下CloudMadao/source/_data创建一个<code>footer.swig</code>文件,若是<code>_data</code>目录不存在先创建目录.</p>
<p>在<code>footer.swig</code>文件下添加如下内容</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;script color=<span class="string">"0,0,255"</span> opacity=<span class="string">"0.5"</span> zIndex=<span class="string">"-1"</span> count=<span class="string">"99"</span> </span><br><span class="line">        src="https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在主题配置文件中启用该文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="string">source/_data/footer.swig</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>[Java基础]-ArrayList结构</title>
    <url>/2020/05/11/Java%E5%9F%BA%E7%A1%80-ArrayList%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<blockquote>
<p>ArrayList是基于数组形式实现的集合，存在着数组的特性：</p>
</blockquote>
<ul>
<li>添加和删除元素涉及到一次元素复制，比较耗费性能(除在数组后面直接添加元素外)</li>
<li>数组是一种随机访问模式，其中的元素获取非常快<a id="more"></a>


</li>
</ul>
<table>
<thead>
<tr>
<th align="center">问题</th>
<th align="center">结论</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ArrayList是否允许为空</td>
<td align="center">允许</td>
</tr>
<tr>
<td align="center">ArrayList是否允许重复数据</td>
<td align="center">允许</td>
</tr>
<tr>
<td align="center">ArrayList是否有序</td>
<td align="center">有序</td>
</tr>
<tr>
<td align="center">ArrayList是否线程安全</td>
<td align="center">不安全</td>
</tr>
</tbody></table>
<h2 id="ArrayList添加元素的过程"><a href="#ArrayList添加元素的过程" class="headerlink" title="ArrayList添加元素的过程"></a>ArrayList添加元素的过程</h2><p>添加元素的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        list.add(<span class="string">"000"</span>);</span><br><span class="line">        list.add(<span class="string">"111"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>进入ArrayList的add方法，可以看到：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>; <span class="comment">//Default initial capacity.</span></span><br><span class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">       elementData[size++] = e;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>发现在调用<code>add</code>方法时只是在<code>elementData</code>的某个位置添加一个元素而已。</p>
<blockquote>
<p>那么当ArrayList底层数组大小不够时要如何处理呢？答案是对底层数组进行扩容处理</p>
</blockquote>
<h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><p>查看<code>add</code>方法的<code>ensureCapacityInternal</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>进一步查看<code>ensureExplicitCapacity</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">        modCount++; <span class="comment">//在父类ArrayList中定义了modCount的值初始为0，其含义为结构的扩容次数</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// overflow-conscious code</span></span><br><span class="line">        <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)  <span class="comment">//如果最小需要容量大于数组长度，将数组扩容</span></span><br><span class="line">            grow(minCapacity);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可以发现，调用了<code>grow</code>方法进行了扩容操作，其源码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// overflow-conscious code</span></span><br><span class="line">      <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">      <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">          newCapacity = minCapacity;</span><br><span class="line">      <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">          newCapacity = hugeCapacity(minCapacity);</span><br><span class="line">      <span class="comment">// minCapacity is usually close to size, so this is a win:</span></span><br><span class="line">      elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>看到新容器的容量为原容器容量右移一位（<code>int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);</code>）即相当于原容量的<strong>1.5</strong>倍。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ARRAY_SIZE = Integer.MAX_VALUE - <span class="number">8</span>;</span><br></pre></td></tr></table></figure>

<p>根据右移运算符的性质不难发现扩容后的新容器的容量<code>newCapacity</code>可能会导致其值为负数，因此需要判断扩容后的容量是否为负<code>if（newCapacity - MAX_ARRAY_SIZE &gt; 0）</code>若是负数时抛出<code>内存溢出异常</code>，否则将内存最大值开放到<em>Integer.MAX_VALUE</em></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">hugeCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (minCapacity &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> OutOfMemoryError();</span><br><span class="line">       <span class="keyword">return</span> (minCapacity &gt; MAX_ARRAY_SIZE) ?</span><br><span class="line">           Integer.MAX_VALUE :</span><br><span class="line">           MAX_ARRAY_SIZE;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>最后<code>grow</code>调用<code>Arrays</code>工具类的<code>copyOf</code>方法将数据复制到<code>新数组</code>中,即添加元素可能会导致扩容操作，此时数组已经换成一个更大容量的数组了。</p>
<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><p>即在ArrayList数组的指定位置插入指定元素，此时，调用了<code>add</code>带两个参数的重载方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>);  <span class="comment">// Increments modCount!!</span></span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                         size - index);</span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>rangeCheckForAdd(index)</code>函数检查了index的范围，不能大于size，也不能小于0，然后就是确认容量，然后是复制的过程，把index之后的元素都往后移一个单位，然后再index插入需要插入的元素</p>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>ArrayList删除元素有两种方式，一种是按照下标删除，一种是按照匹配的第一个元素值来删除</p>
<h3 id="按下标删除："><a href="#按下标删除：" class="headerlink" title="按下标删除："></a>按下标删除：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        rangeCheck(index);</span><br><span class="line"></span><br><span class="line">        modCount++;</span><br><span class="line">        E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">            System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">        elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>rangeCheck(index)</code>函数检查index范围是否合法，当<em>index&gt;=size</em>时，抛出下标越界异常。</p>
<p>然后将下标后部元素全部向前复制一位，然后把最后的一个数据设置为null，如果数组只有一个对象那就直接赋值为null.</p>
<h2 id="ArrayList与Vector"><a href="#ArrayList与Vector" class="headerlink" title="ArrayList与Vector"></a>ArrayList与Vector</h2><p>ArrayList是线程非安全的，这很明显，因为ArrayList中所有的方法都不是同步的，在<code>并发下一定会出现线程安全问题</code>。</p>
<p><em>Vector</em>，它是ArrayList的线程安全版本，其实现90%和ArrayList都完全一样，区别在于：</p>
<ul>
<li>Vector是线程安全的，ArrayList是线程非安全的</li>
<li>Vector可以指定增长因子，如果该增长因子指定了，那么扩容的时候会每次新的数组大小会在原数组的大小基础上加上增长因子；如果不指定增长因子，那么就给原数组大小*2，源代码如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">If the capacity increment is less than or equal to zero, the capacity of the vector is doubled each time it needs to grow</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">int</span> capacityIncrement;</span><br></pre></td></tr></table></figure>

<p><code>grow中:</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> newCapacity = oldCapacity + ((capacityIncrement &gt; <span class="number">0</span>) ?</span><br><span class="line">                                         capacityIncrement : oldCapacity);</span><br></pre></td></tr></table></figure>

<h2 id="elementData的transient修饰符"><a href="#elementData的transient修饰符" class="headerlink" title="elementData的transient修饰符"></a>elementData的transient修饰符</h2><p>可以看到<code>elementData</code>是被<code>transient</code>修饰的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">transient</span> Object[] elementData; <span class="comment">// non-private to simplify nested class access</span></span><br></pre></td></tr></table></figure>

<p>那么<strong>为什么要使用transient修饰呢?</strong></p>
<p>ArrayList实现了Serializable接口，这意味着ArrayList是可以被序列化的，用<em>transient</em>修饰elementData意味着我们不希望elementData数组被序列化，因为序列化ArrayList的时候，ArrayList里面的elementData未必是满的，比方说elementData有10的大小，但是我只用了其中的3个，那么是否有必要序列化整个elementData呢？显然没有这个必要，因此ArrayList中重写了writeObject方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException</span>&#123;</span><br><span class="line">        <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">        <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">        s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></span><br><span class="line">        s.writeInt(size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">            s.writeObject(elementData[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>每次序列化的时候调用这个方法，先调用defaultWriteObject()方法序列化ArrayList中的非transient元素，elementData不去序列化，然后遍历elementData，只序列化那些有的元素，这样：</p>
<ol>
<li>加快了序列化速度</li>
<li>减少文件大小</li>
</ol>
<blockquote>
<p><strong>如果以后开发过程中有遇到这种情况，也是值得学习、借鉴的一种思路。</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>[差分隐私]-初窥门径</title>
    <url>/2020/05/15/%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81-%E5%88%9D%E7%AA%A5%E9%97%A8%E5%BE%84/</url>
    <content><![CDATA[<p>差分隐私是Dwork在2006年针对统计数据库的隐私泄露问题提出的一种隐私定义：</p>
<p>在此定义下，对数据集的计算处理结果对于具体某个记录的变化是不敏感的，<strong>单个记录在数据集中或不在数据集中，对计算结果的影响微乎其微</strong>，所以一个记录因其加入到数据集中所产生的隐私泄漏风险被控制在极小的、可接受的范围内，攻击者无法通过观察计算结果而获取准确的个体信息<strong>,因为攻击者无法从查询输出结果判断这条记录是否在数据集内</strong>。</p>
<blockquote>
<p>差分隐私并不是要求保护数据集的整体性的隐私，而是对数据集中每个个体的隐私提供保护</p>
<p>差分隐私不适用于返回原始数据的查询，因为此类查询本质上就违反了隐私的概念</p>
</blockquote>
<a id="more"></a>

<h3 id="差分隐私的数学定义"><a href="#差分隐私的数学定义" class="headerlink" title="差分隐私的数学定义"></a>差分隐私的数学定义</h3><p>对于一个随机算法$M$,$P_m$为$M$所有可能的输出构成的集合，对于任意一对邻近数据集$D$和$D’$及$P_m$的任意子 集$S_m$,若$M$满足：<br>$$<br>Pr[M(D)\in S_m]\le exp(\epsilon)×Pr[M(D’)\in S_m]+\delta<br>$$</p>
<p>则称$M$满足$(\epsilon,\delta)$-(近似)差分隐私，当$\delta=0$时，称$M$提供$\epsilon$-差分隐私保护，其中$\epsilon$为隐私保护预算。</p>
<h4 id="隐私保护预算："><a href="#隐私保护预算：" class="headerlink" title="隐私保护预算："></a>隐私保护预算：</h4><p>根据差分隐私的定义可以看出，隐私保护预算$\epsilon$用来<strong>控制算法$M$在两个相邻数据集上获得相同输出的概率比值</strong>，其值体现了该算法$M$能够提供的隐私保护的水平，当参数$\epsilon$越小时，作用在一对相邻数据集上的差分隐私算法返回的查询结果的概率分布越相似，攻击者越难区分这一对邻近数据集。</p>
<h4 id="全局敏感度"><a href="#全局敏感度" class="headerlink" title="全局敏感度"></a>全局敏感度</h4><p>设有函数:  $f: D\rightarrow R$,输入为数据集$D$，$R$是查询函数的返回结果，对任意邻近数据集$D$和$D’$,函数$f$的全局敏感度为：<br>$$<br>GS_f=max_{D,D’}||f(D)-f(D’)||_1<br>$$<br>其中$||f(D)-f(D’)||_1$为$f(D)$与$f(D’)$的曼哈顿距离，函数的全局敏感度只由函数本身决定</p>
<blockquote>
<p>敏感度指改变数据中一条的记录对于查询结果的改变</p>
</blockquote>
<h4 id="局部敏感度"><a href="#局部敏感度" class="headerlink" title="局部敏感度"></a>局部敏感度</h4><p>当全局敏感度较大时需要在输出中添加足够大的噪声才能提供隐私保护，导致数据可用性较差，为此提出了 <strong>局部敏感度</strong>概念：</p>
<p>设有查询函数$f: D\rightarrow R$,输入为数据集$D$，$R$是查询函数的返回结果,在<code>一给定的数据集D</code>和<code>其任意相邻数据集D&#39;</code>上，局部敏感度为：<br>$$<br>LS_f(D)=max_{D’}||f(D)-f(D’)||_1<br>$$<br>因为局部敏感度<strong>只是对于一个数据集做变化</strong>，所以局部敏感度由查询函数和给定的数据集共同决定。</p>
<blockquote>
<p>因为局部敏感度限制了全局敏感度条件中任意一对邻近数据集中的一个数据集，因此，<code>若给定的数据集</code>和全局敏感度中使</p>
<p>$||f(D)-f(D’)||_1$达到最大的数据集相同时，<strong>$GS_f=LS_f$</strong></p>
</blockquote>
<h4 id="平滑敏感度"><a href="#平滑敏感度" class="headerlink" title="平滑敏感度"></a>平滑敏感度</h4><p>直接使用局部敏感度生成噪声会泄露数据集信息，为此提出了根据平滑敏感度生成噪声的方案：</p>
<p>对于一个$\beta&gt;0$，查询$f$的$\beta-$平滑敏感度为：<br>$$<br>S_{f}^*(D)=max_{y\in D^n}(LS_f(y)×exp({-\beta d(D,y)})<br>$$</p>
<ul>
<li>$y$是同给定数据集$D$维度相同的任意数据集</li>
<li>$d$函数返回数据集$D$和$y$中不同元组的个数</li>
</ul>
<blockquote>
<p>平滑敏感度是满足平滑上界的最小函数</p>
</blockquote>
<h3 id="差分隐私保护算法的性质"><a href="#差分隐私保护算法的性质" class="headerlink" title="差分隐私保护算法的性质"></a>差分隐私保护算法的性质</h3><p>在需要多次应用差分隐私保护算法的情况下，为了保证整个过程的隐私保护水平控制在给定的保护预算  $\epsilon$ 之内，需要合理的将全部预算分配到整个算法的各个步骤中，此时可以利用隐私保护算法的性质</p>
<h4 id="序列组合性"><a href="#序列组合性" class="headerlink" title="序列组合性"></a>序列组合性</h4><p>设有随机算法M1,M2,…Mn，其隐私保护预算分别为ε1, ε2,…,εn,则当这些算法<code>作用于同一个数据集D时</code>，由这n个算法构成的组合算法M(M1,M2,…Mn)提供($\sum_{i=1}^{n}$)-差分隐私保护。</p>
<blockquote>
<p>即当一个算法序列作用于同一数据集时，最终的差分隐私预算等价于算法序列所有算法预算的和</p>
</blockquote>
<h4 id="并行组合性"><a href="#并行组合性" class="headerlink" title="并行组合性"></a>并行组合性</h4><p>设随机算法M1,M2,…Mn隐私保护预算分别为ε1, ε2,…,εn，对于数据集D的互不相交的子集D1,D2,…Dn，由这n个算法构成的组合算法M(M1,M2,…Mn)提供max(εi)-差分隐私保护。</p>
<blockquote>
<p>即当有多个算法序列分别作用在一个数据集上多个不同子集上时, 最终的差分隐私预算等价于算法序列中所有算法预算的最大值</p>
</blockquote>
<h4 id="变换不变性"><a href="#变换不变性" class="headerlink" title="变换不变性"></a>变换不变性</h4><p>差分隐私对于后处理算法具有免疫性, 如果一个算法的结果满足 $\epsilon-$ 差分隐私, 那么在这个结果上进行的任何处理都不会对隐私保护有所影响。</p>
<h4 id="中凸性"><a href="#中凸性" class="headerlink" title="中凸性"></a>中凸性</h4><p>如果有2 个不同的差分隐私算法, 都提供了足够的不确定性来保护隐私, 那么可以通过选择任意的算法来应用到数据上实现对数据的隐私保护, 只要选择的算法和数据是独立的</p>
<h3 id="差分隐私的实现机制"><a href="#差分隐私的实现机制" class="headerlink" title="差分隐私的实现机制"></a>差分隐私的实现机制</h3><p>在实践中，通常使用拉普拉斯机制(<em>Laplace Machainism</em>)与指数机制(<em>Exponential Mechanism</em>)来实现差分隐私保护，其中拉普拉斯机制适用于<code>数值型结果的保护</code>，指数机制则适用<code>离散型结果的保护</code>。</p>
<h4 id="拉普拉斯机制"><a href="#拉普拉斯机制" class="headerlink" title="拉普拉斯机制"></a>拉普拉斯机制</h4><p>给定数据集D，设有函数$f:D\rightarrow R^d$，其敏感度为$\Delta f$,  那么随机算法$M(D)=f(D)+Y$提供$\epsilon-$差分隐私保护,其中$Y$~$Laplace(u,b)$为随机噪声($u=0,b=\frac{\Delta f}{\epsilon} $),服从尺度参数为$\frac{\Delta f}{\epsilon}$的拉普拉斯分布。</p>
<blockquote>
<p>需要加入的Laplace噪声均值应该为0，此时输出的$M(D)$才是$f(D)$的无偏估计</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200709200717.png" alt=""></p>
<p>根据上图可以看出$\epsilon$越小，所加入的Laplace噪声概率密度越平均所加入的噪声为0的概率就越小, 对输出的混淆程度就越大, 保护程度就越高。</p>
<h3 id="指数机制"><a href="#指数机制" class="headerlink" title="指数机制"></a>指数机制</h3><p>对于任意一个可用性函数$q$和隐私保护预算$\epsilon$，若随机算法$M$正比于$exp(\frac{\epsilon*q(D,o)}{2\Delta q})$的概率输出一个$o\in O$作为结果，则随机算法$M$满足$\epsilon-$差分隐私。</p>
<ul>
<li>$q(D,o)\rightarrow R$为可用性函数，用来衡量每一个输出项的价值，值越大，该项价值越大，被输出的概率越高。<ul>
<li>$D$为输入的数据集</li>
<li>$o$为可能输出集合中的项</li>
</ul>
</li>
<li>$\Delta q$为可用性函数$q$的全局敏感度</li>
<li>指数机制的目的是使得输出结果满足一定的概率分布，当$\epsilon$越小时，每一项输出的概率就越接近</li>
</ul>
<blockquote>
<p>以投票为例，10个人中9个人分别对1,2,3各投了3票，现加入指数机制保护A的投票结果，如图示:</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200710103346.png" alt=""></p>
<h3 id="隐私保护数据发布"><a href="#隐私保护数据发布" class="headerlink" title="隐私保护数据发布"></a>隐私保护数据发布</h3><h4 id="交互式数据发布"><a href="#交互式数据发布" class="headerlink" title="交互式数据发布"></a>交互式数据发布</h4><p><code>交互式数据发布问题可表述为：</code>给定数据集Ｄ和查询集合Ｆ，需寻求一种数据发布机制，使其能够在满足差分隐私保护的条件下`逐个回答Ｆ 中的查询，直到耗尽全部隐私保护预算．发布机制的性能通常由精确度来衡量．交互式数据发布即是要在满足一定精确度的条件下，<strong>以给定的隐私保护预算回答尽可能多的查询</strong></p>
<h5 id="交互式发布机制"><a href="#交互式发布机制" class="headerlink" title="交互式发布机制"></a>交互式发布机制</h5><p>交互式发布机制直接对数据集进行操作来响应查询</p>
<ul>
<li><p><code>Laplace机制：</code>通过向每个查询结果添加服从Laplace分布的噪声来实现保护</p>
<ul>
<li>缺点：查询的数量有限,与数据集记录数成线性关系；在干扰针对连续属性的查询结果时会产生较大的噪声</li>
</ul>
</li>
<li><p><code>中位数机制：</code>将查询分为<strong>难查询</strong>和<strong>易查询</strong>两类，易查询可以通过难查询的结果来确定，无需消耗任何预算，难查询的结果通过Laplace噪声进行干扰，其查询的数量级为指数级</p>
<ul>
<li>缺点：算法的时间复杂度会随着数据集容量的增长呈现指示增长。</li>
</ul>
</li>
<li><p><code>PMW机制：</code>把数据集在数据域上的分布视作一个直方图，将每个频数视作相同然后等待查询，每个查询的结果加上Laplace噪声之后与上一次查询进行比较，<strong>小于阈值时发布上一次查询结果的值</strong>，此过程不消耗隐私保护预算，只有当差异大于此阈值时，才会发布新的查询结果，并调整直方图中相应频数的值</p>
<ul>
<li>缺点：只能处理计数类型的查询，可以回答指数级的查询。</li>
</ul>
</li>
</ul>
<h5 id="基于直方图的发布"><a href="#基于直方图的发布" class="headerlink" title="基于直方图的发布"></a>基于直方图的发布</h5><p>在形成直方图时，需要根据<code>属性或属性组合</code>的$w$个不同等级将数据集划分为$w$个数据格，然后分别统计每个数据格的频数，根据直方图存在<strong>宽度</strong>可以分为三种基本类型：<code>等宽直方图</code>、<code>v-优化直方图</code>、<code>压缩直方图</code></p>
<p>Dwork采用给等宽直方图$w$个数据格频数分别添加Laplace噪声的方法实现差分隐私保护</p>
<blockquote>
<p>对多维直方图而言，该机制会使长区间查询的结果因累积噪声过大而失效</p>
</blockquote>
<ul>
<li><p><code>聚类技术优化直方图长区间:</code>如NoiseFirst方法采用了聚类技术，<strong>动态合并邻近相似等宽区间</strong>，每个区间的频数为其中全部频数的均值，然后为每个分区频数添加噪声，由于存在合并方式或子集数不同，添加的噪声也可能不同。</p>
<blockquote>
<p>这种方法解决了长区间查询计数误差，但是因为合并方式不同存在<code>重构误差</code>和<code>噪声误差</code></p>
</blockquote>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200709214852.png" alt=""></p>
<blockquote>
<p>直方图结构实质上是降低了查询的敏感度</p>
</blockquote>
<h4 id="非交互式数据发布"><a href="#非交互式数据发布" class="headerlink" title="非交互式数据发布"></a>非交互式数据发布</h4><p><code>非交互式数据发布问题可表述为：</code>给定数据集Ｄ 和查询集合Ｆ，需寻求一个数据发布机制，使其能够在满足差分隐私保护的条件下一次性回答Ｆ 中所有的查询．</p>
<h5 id="批查询"><a href="#批查询" class="headerlink" title="批查询"></a>批查询</h5><p>数据管理者针对所有可能的查询，一次性对外发布所有查询的结果</p>
<p>在批查询模式下，由于各个查询之间彼此相关，修改数据集中记录可能导致多个查询结果的改变，因此具有比单一查询高得多的敏感度。</p>
<blockquote>
<p>批查询通过映射和变换查询集合来降低总敏感度，从而降低噪声量</p>
<ul>
<li><p>Laplace机制1：为每个范围查询加入独立的噪声，敏感度O($n^2$)</p>
</li>
<li><p>Laplace机制2：先为每个单一查询加入噪声，再根据干扰后的单一查询计算其他范围查询结果</p>
</li>
<li><p>小波变换法</p>
</li>
<li><p>层次查询法</p>
</li>
</ul>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200710102144.png" alt=""></p>
<h5 id="列联表发布"><a href="#列联表发布" class="headerlink" title="列联表发布"></a>列联表发布</h5><h5 id="基于分组的数据发布"><a href="#基于分组的数据发布" class="headerlink" title="基于分组的数据发布"></a>基于分组的数据发布</h5><h5 id="数据发布方案总结"><a href="#数据发布方案总结" class="headerlink" title="数据发布方案总结"></a>数据发布方案总结</h5><p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200710094219.png" alt=""></p>
<h3 id="差分隐私保护下的数据挖掘"><a href="#差分隐私保护下的数据挖掘" class="headerlink" title="差分隐私保护下的数据挖掘"></a>差分隐私保护下的数据挖掘</h3><p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200710094442.png" alt=""></p>
<ul>
<li><p><code>Sample-Aggregate</code>：</p>
<p>Sample&amp;Aggregate框架中的噪声与数据集和查询函数都相关，该框架将查询函数f转换为平滑敏感度较低的相关函数$\hat f$</p>
<p>Sample-Aggregate 框架首先将一个数据集随机取样划分为m 个子集, m 是框架中设定好的参数</p>
<p>然后对每个子集上执行查询函数$f$来生成一个在 $f$ 的输出空间上的值 $Z_k$ , 最后通过聚合函数生成 $\hat f$ 来替代原始查询函数f , 加入校正至平滑敏感度的噪声来得到查询结果。</p>
<p><code>Sample&amp;Aggregate框架不支持连接</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200628094721.jpg" alt=""></p>
</li>
</ul>
<hr/>

<blockquote>
<ol>
<li><p>熊平, 朱天清, 王晓峰. 差分隐私保护及其应用[J]. 计算机学报, 2014, 37(1): 101-122.</p>
</li>
<li><p>李效光, 李晖, 李凤华, 等. 差分隐私综述[J]. 信息安全学报, 2018, 3(5): 92-104.</p>
</li>
<li><p>王红, 葛丽娜, 王丽颖, 等. 面向数据直方图发布的差分隐私保护综述[J]. 计算机应用研究, 2017, 34(6): 1609-1612.</p>
</li>
</ol>
</blockquote>
]]></content>
      <categories>
        <category>差分隐私</category>
      </categories>
      <tags>
        <tag>差分隐私</tag>
        <tag>综述</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次CentOs7上安装Oracle的踩坑过程</title>
    <url>/2020/05/29/%E8%AE%B0%E4%B8%80%E6%AC%A1CentOs7%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%E7%9A%84%E8%B8%A9%E5%9D%91%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="安装环境："><a href="#安装环境：" class="headerlink" title="安装环境："></a>安装环境：</h3><p>操作系统：CentOS 7.8<br>Oracle： Oracle 11g </p>
<blockquote>
<p>难装的一批，辣鸡软件！</p>
</blockquote>
<a id="more"></a>



<h3 id="Yum-安装vim软件，用于编辑配置文件（个人习惯）"><a href="#Yum-安装vim软件，用于编辑配置文件（个人习惯）" class="headerlink" title="Yum 安装vim软件，用于编辑配置文件（个人习惯）"></a>Yum 安装vim软件，用于编辑配置文件（个人习惯）</h3>   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install vim -y</span><br></pre></td></tr></table></figure>

<h3 id="安装Oracle-11g依赖包"><a href="#安装Oracle-11g依赖包" class="headerlink" title="安装Oracle 11g依赖包"></a>安装Oracle 11g依赖包</h3>   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install yum install gcc make binutils gcc-c++ compat-libstdc++-33 elfutils-libelf-devel elfutils-libelf-devel-static ksh libaio libaio-devel numactl-devel sysstat unixODBC unixODBC-devel pcre-devel –y</span><br></pre></td></tr></table></figure>

<h3 id="关闭selinux"><a href="#关闭selinux" class="headerlink" title="关闭selinux"></a>关闭selinux</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;selinux&#x2F;config</span><br></pre></td></tr></table></figure>

<p>设置SELINUX=disabled</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setenforce 0</span><br></pre></td></tr></table></figure>

<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<h3 id="添加Oracle用户组和用户"><a href="#添加Oracle用户组和用户" class="headerlink" title="添加Oracle用户组和用户"></a>添加Oracle用户组和用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# groupadd oinstall</span><br><span class="line">[root@localhost ~]# groupadd dba</span><br><span class="line">[root@localhost ~]# groupadd oper</span><br><span class="line">[root@localhost ~]# useradd -g oinstall -G dba,oper oracle</span><br></pre></td></tr></table></figure>

<p>更改oracle密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd oracle</span><br></pre></td></tr></table></figure>

<p>添加完成后查看oracle用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# id oracle</span><br><span class="line">uid=1000(oracle) gid=1000(oinstall) 组=1000(oinstall),1001(dba),1002(oper)</span><br></pre></td></tr></table></figure>

<h3 id="配置HostName"><a href="#配置HostName" class="headerlink" title="配置HostName"></a>配置HostName</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>

<p>在其中添加如下代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.192.128 CentOS</span><br></pre></td></tr></table></figure>

<p>测试hostname</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ping -c 3 CentOS</span><br><span class="line">PING CentOS (192.168.192.128) 56(84) bytes of data.</span><br><span class="line">64 bytes from CentOS (192.168.192.128): icmp_seq=1 ttl=64 time=0.063 ms</span><br><span class="line">64 bytes from CentOS (192.168.192.128): icmp_seq=2 ttl=64 time=0.034 ms</span><br><span class="line">64 bytes from CentOS (192.168.192.128): icmp_seq=3 ttl=64 time=0.036 ms</span><br><span class="line"></span><br><span class="line">--- CentOS ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2000ms</span><br></pre></td></tr></table></figure>

<h3 id="修改内核参数"><a href="#修改内核参数" class="headerlink" title="修改内核参数"></a>修改内核参数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/sysctl.conf </span><br><span class="line"></span><br><span class="line">fs.aio-max-nr=1048576</span><br><span class="line">fs.file-max=6815744</span><br><span class="line">kernel.shmall=2097152      </span><br><span class="line">kernel.shmmni=4096  </span><br><span class="line">kernel.shmmax = 2147483648 #其值为内存的一半，单位为byte</span><br><span class="line">kernel.sem=250 32000 100 128</span><br><span class="line">net.ipv4.ip_local_port_range=9000 65500</span><br><span class="line">net.core.rmem_default=262144</span><br><span class="line">net.core.rmem_max=4194304</span><br><span class="line">net.core.wmem_default=262144</span><br><span class="line">net.core.wmem_max=1048586</span><br></pre></td></tr></table></figure>

<p>使参数生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<h3 id="修改文件限制"><a href="#修改文件限制" class="headerlink" title="修改文件限制"></a>修改文件限制</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/security/limits.conf</span><br></pre></td></tr></table></figure>
<p>在文件末端添加如下代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">oracle soft nproc 2047</span><br><span class="line">oracle hard nproc 16384</span><br><span class="line">oracle soft nofile 1024</span><br><span class="line">oracle hard nofile 65536</span><br><span class="line">oracle soft stack 10240</span><br></pre></td></tr></table></figure>

<p>其次还需修改<code>/etc/pam.d/login</code>中内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/pam.d/login</span><br><span class="line">session  required   /lib64/security/pam_limits.so</span><br><span class="line">session  required   pam_limits.so</span><br></pre></td></tr></table></figure>

<p>在<code>/etc/profile</code>中添加如下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ $USER = "oracle" ]; then</span><br><span class="line">  if [ $SHELL = "/bin/ksh" ]; then</span><br><span class="line">   ulimit -p 16384</span><br><span class="line">   ulimit -n 65536</span><br><span class="line">  else</span><br><span class="line">   ulimit -u 16384 -n 65536</span><br><span class="line">  fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>使环境变量立即生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# source /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="创建Oracle安装目录"><a href="#创建Oracle安装目录" class="headerlink" title="创建Oracle安装目录"></a>创建Oracle安装目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir -p /db/app/oracle/product/11.2.0</span><br><span class="line">[root@localhost ~]# mkdir /db/app/oracle/oradata</span><br><span class="line">[root@localhost ~]# mkdir /db/app/oracle/inventory</span><br><span class="line">[root@localhost ~]# mkdir /db/app/oracle/fast_recovery_area</span><br><span class="line">[root@localhost ~]# chown -R oracle:oinstall /db/app/oracle</span><br><span class="line">[root@localhost ~]# chmod -R 775 /db/app/oracle</span><br></pre></td></tr></table></figure>

<h3 id="配置Oracle用户环境变量"><a href="#配置Oracle用户环境变量" class="headerlink" title="配置Oracle用户环境变量"></a>配置Oracle用户环境变量</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# su - oracle</span><br><span class="line">[oracle@localhost ~]$ vim .bash_profile </span><br><span class="line"></span><br><span class="line">umask 022</span><br><span class="line">export ORACLE_HOSTNAME=CentOS</span><br><span class="line">export ORACLE_BASE=/db/app/oracle</span><br><span class="line">export ORACLE_HOME=$ORACLE_BASE/product/11.2.0/</span><br><span class="line">export ORACLE_SID=orcl</span><br><span class="line">export PATH=.:$ORACLE_HOME/bin:$ORACLE_HOME/OPatch:$ORACLE_HOME/jdk/bin:$PATH</span><br><span class="line">export LC_ALL="en_US"</span><br><span class="line">export LANG="en_US"</span><br><span class="line">export NLS_LANG="AMERICAN_AMERICA.UTF8"</span><br><span class="line">export NLS_DATE_FORMAT="YYYY-MM-DD HH24:MI:SS"</span><br></pre></td></tr></table></figure>

<p>配置完使环境变量生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost ~]$ source .bash_profile</span><br></pre></td></tr></table></figure>

<h3 id="解压Oracle文件"><a href="#解压Oracle文件" class="headerlink" title="解压Oracle文件"></a>解压Oracle文件</h3><p>安装unzip</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost db]# yum install -y unzip</span><br></pre></td></tr></table></figure>

<p>解压Oracle</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost db]# unzip linux.x64_11gR2_database_1of2.zip &amp;&amp; unzip linux.x64_11gR2_database_2of2.zip</span><br></pre></td></tr></table></figure>

<p>解压完成后执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost db]# cp -R database/response/ /db/app/</span><br><span class="line">[root@localhost app]# chmod -R 755 response</span><br><span class="line">[root@localhost app]# chown -R oracle:oinstall /db/app/</span><br></pre></td></tr></table></figure>

<h3 id="配置db-install-rsp响应模板文件开始静默安装"><a href="#配置db-install-rsp响应模板文件开始静默安装" class="headerlink" title="配置db_install.rsp响应模板文件开始静默安装"></a>配置<code>db_install.rsp</code>响应模板文件开始静默安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost app]$ vim response/db_install.rsp </span><br><span class="line"></span><br><span class="line">oracle.install.option=INSTALL_DB_SWONLY</span><br><span class="line">DECLINE_SECURITY_UPDATES=true</span><br><span class="line">UNIX_GROUP_NAME=oinstall</span><br><span class="line">INVENTORY_LOCATION=/db/app/oracle/inventory</span><br><span class="line">SELECTED_LANGUAGES=en,zh_CN</span><br><span class="line">ORACLE_HOSTNAME=CentOS</span><br><span class="line">ORACLE_HOME=/db/app/oracle/product/11.2.0</span><br><span class="line">ORACLE_BASE=/db/app/oracle</span><br><span class="line">oracle.install.db.InstallEdition=EE</span><br><span class="line">oracle.install.db.isCustomInstall=true</span><br><span class="line">oracle.install.db.DBA_GROUP=dba</span><br><span class="line">oracle.install.db.OPER_GROUP=dba</span><br></pre></td></tr></table></figure>

<h3 id="开始静默安装"><a href="#开始静默安装" class="headerlink" title="开始静默安装"></a>开始静默安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R oracle:oinstall /db/</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost database]$ ./runInstaller -ignorePrereq  -silent -responseFile /db/app/response/db_install.rsp</span><br></pre></td></tr></table></figure>

<p>安装过程可能比较长，可以通过以下命令监听安装日志，如:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -f /db/app/oracle/inventory/logs/installActions2020-05-28_09-42-18AM.log</span><br></pre></td></tr></table></figure>

<p>安装完成会显示如下信息 </p>
<p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200528094822.png" alt=""></p>
<p>按照提示，我们需要执行相应脚本以进行下一步操作:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost database]# sh /db/app/oracle/inventory/orainstRoot.sh </span><br><span class="line">[root@localhost database]# sh /db/app/oracle/product/11.2.0/root.sh</span><br></pre></td></tr></table></figure>

<h3 id="配置静默监听"><a href="#配置静默监听" class="headerlink" title="配置静默监听"></a>配置静默监听</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost ~]$ netca /silent /responsefile /db/app/response/netca.rsp</span><br><span class="line"><span class="meta">#</span><span class="bash">显示如下信息</span></span><br><span class="line">Parsing command line arguments:</span><br><span class="line">    Parameter "silent" = true</span><br><span class="line">    Parameter "responsefile" = /db/app/response/netca.rsp</span><br><span class="line">Done parsing command line arguments.</span><br><span class="line">Oracle Net Services Configuration:</span><br><span class="line">Profile configuration complete.</span><br><span class="line">Oracle Net Listener Startup:</span><br><span class="line">    Running Listener Control: </span><br><span class="line">      /db/app/oracle/product/11.2.0/bin/lsnrctl start LISTENER</span><br><span class="line">    Listener Control complete.</span><br><span class="line">    Listener started successfully.</span><br><span class="line">Listener configuration complete.</span><br><span class="line">Oracle Net Services configuration successful. The exit code is 0</span><br></pre></td></tr></table></figure>

<p>查看监听端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install net-tools</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -tnulp | grep 1521</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200528164450.png" alt=""></p>
<h3 id="静默创建dbca数据库"><a href="#静默创建dbca数据库" class="headerlink" title="静默创建dbca数据库"></a>静默创建dbca数据库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /db/app/response/dbca.rsp</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GDBNAME = "orcl"</span><br><span class="line">SID = "orcl"</span><br><span class="line">SYSPASSWORD = "oracle"</span><br><span class="line">SYSTEMPASSWORD = "oracle"</span><br><span class="line">SYSMANPASSWORD = "oracle"</span><br><span class="line">DBSNMPPASSWORD = "oracle"</span><br><span class="line">DATAFILEDESTINATION =/db/app/oracle/oradata</span><br><span class="line">RECOVERYAREADESTINATION=/db/app/oracle/fast_recovery_area</span><br><span class="line">CHARACTERSET = "AL32UTF8"</span><br><span class="line">TOTALMEMORY = "8192" #设置为内存的50%</span><br></pre></td></tr></table></figure>

<p>执行静默建库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost database]$ dbca -silent -responseFile /db/app/response/dbca.rsp</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200528100906.png" alt=""><br>查看Oracle实例进程</p>
<blockquote>
<p>在最后一步安装的时候安装界面会先清屏，需要按下Enter按钮输入密码（123456），输入2次然后才看见安装进程。</p>
</blockquote>
<blockquote>
<p>若出现<code>Look at the log file &quot;/db/app/oracle/cfgtoollogs/dbca/orcl11g.log&quot; for further details.</code>是因为在/etc/oratab文件中已经指定了<code>$ORACLE_SID</code>（上次删除数据库时，没有彻底清除/etc/oratab）此时只需要将<code>/etc/oratab</code>中的<code>orcl11g:/db/app/oracle/product/11.2.0:N</code>这一行删除或注释即可。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost database]$ ps -ef | grep ora_ | grep -v grep</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200528164747.png" alt=""><br>查看监听状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost database]$ lsnrctl status</span><br><span class="line">    </span><br><span class="line">LSNRCTL for Linux: Version 11.2.0.1.0 - Production on 28-MAY-2020 16:41:11</span><br><span class="line">    </span><br><span class="line">Copyright (c) 1991, 2009, Oracle.  All rights reserved.</span><br><span class="line">    </span><br><span class="line">Connecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=IPC)(KEY=EXTPROC1521)))</span><br><span class="line">STATUS of the LISTENER</span><br><span class="line">------------------------</span><br><span class="line">    Alias                     LISTENER</span><br><span class="line">    Version                   TNSLSNR for Linux: Version 11.2.0.1.0 - Production</span><br><span class="line">Start Date                28-MAY-2020 16:37:29</span><br><span class="line">    Uptime                    0 days 0 hr. 3 min. 41 sec</span><br><span class="line">    Trace Level               off</span><br><span class="line">Security                  ON: Local OS Authentication</span><br><span class="line">    SNMP                      OFF</span><br><span class="line">Listener Parameter File   /db/app/oracle/product/11.2.0/network/admin/listener.ora</span><br><span class="line">    Listener Log File         /db/app/oracle/diag/tnslsnr/localhost/listener/alert/log.xml</span><br><span class="line">Listening Endpoints Summary...</span><br><span class="line">      (DESCRIPTION=(ADDRESS=(PROTOCOL=ipc)(KEY=EXTPROC1521)))</span><br><span class="line">  (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=192.168.192.129)(PORT=1521)))</span><br><span class="line">    Services Summary...</span><br><span class="line">Service "orcl11g.us.oracle.com" has 1 instance(s).</span><br><span class="line">      Instance "orcl11g", status READY, has 1 handler(s) for this service...</span><br><span class="line">Service "orcl11gXDB.us.oracle.com" has 1 instance(s).</span><br><span class="line">      Instance "orcl11g", status READY, has 1 handler(s) for this service...</span><br><span class="line">The command completed successfully</span><br></pre></td></tr></table></figure>

<h3 id="登录sqlplus-查看实例状态"><a href="#登录sqlplus-查看实例状态" class="headerlink" title="登录sqlplus,查看实例状态"></a>登录sqlplus,查看实例状态</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@CentOS ~]$ sqlplus /nolog</span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> conn / as sysdba</span></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> select * from v<span class="variable">$version</span>;</span></span><br><span class="line"></span><br><span class="line">BANNER</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production</span><br><span class="line">PL/SQL Release 11.2.0.1.0 - Production</span><br><span class="line">CORE	11.2.0.1.0	Production</span><br><span class="line">TNS for Linux: Version 11.2.0.1.0 - Production</span><br><span class="line">NLSRTL Version 11.2.0.1.0 - Production</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此处出现错误，请查看错误一揽子</p>
</blockquote>
<h3 id="激活scott用户"><a href="#激活scott用户" class="headerlink" title="激活scott用户"></a>激活scott用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> alter user scott account unlock;</span></span><br><span class="line">User altered.</span><br><span class="line"></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> alter user scott identified by tiger;</span></span><br><span class="line">User altered.</span><br></pre></td></tr></table></figure>

<h3 id="创建用户并授权"><a href="#创建用户并授权" class="headerlink" title="创建用户并授权"></a>创建用户并授权</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> create user asuan identified by <span class="string">"123456"</span>;</span></span><br><span class="line">User created.</span><br><span class="line"></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> grant connect,resource to asuan;</span></span><br><span class="line">Grant succeeded.</span><br></pre></td></tr></table></figure>

<h3 id="开启防火墙"><a href="#开启防火墙" class="headerlink" title="开启防火墙"></a>开启防火墙</h3><h3 id="Navicat远程连接Oracle"><a href="#Navicat远程连接Oracle" class="headerlink" title="Navicat远程连接Oracle"></a>Navicat远程连接Oracle</h3><p>开放1521端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;1521&#x2F;tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>配置Navicat，如图</p>
<p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200529084750.png" alt=""></p>
<blockquote>
<p>注意</p>
<p>若此处以服务名连接，则许键入<code>tnsnames.ora</code>中的<code>SERVICE_NAME</code></p>
<p>端口默认为1521，但有时会是其他端口，如1522，需与<code>tnsnames.ora</code>一致</p>
<p>若端口是1522端口，需要修改防火墙规则开放1522端口，否则会出现连接超时错误</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ORCL11G =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = CentOS)(PORT = 1521))</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = orcl11g.us.oracle.com)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">LISTENER_ORCL11G =</span><br><span class="line">  (ADDRESS = (PROTOCOL = TCP)(HOST = CentOS)(PORT = 1521))</span><br></pre></td></tr></table></figure>

<h3 id="设置Oracle开机自启"><a href="#设置Oracle开机自启" class="headerlink" title="设置Oracle开机自启"></a>设置Oracle开机自启</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@CentOS ~]$ dbstart</span><br></pre></td></tr></table></figure>

<p>执行此命令后会出现错误，错误原因为：：dbstart和dbshut脚本文件中ORACLE_HOME_LISTNER的设置有问题</p>
<p>分别修改<code>dbstart</code>和<code>dbshut</code>脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[oracle@CentOS ~]$ vim &#x2F;db&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;bin&#x2F;dbstart </span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">ORACLE_HOME_LISTNER&#x3D;$1</span><br><span class="line">修改为：</span><br><span class="line">ORACLE_HOME_LISTNER&#x3D;$ORACLE_HOME</span><br></pre></td></tr></table></figure>

<p><code>dbshut</code>也进行同样的修改，修改后保存退出，问题解决</p>
<h5 id="Linux启动时自动启动Oracle监听和实例"><a href="#Linux启动时自动启动Oracle监听和实例" class="headerlink" title="Linux启动时自动启动Oracle监听和实例"></a>Linux启动时自动启动Oracle监听和实例</h5><ul>
<li>修改<code>/etc/oratab</code>文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@CentOS ~]# vim &#x2F;etc&#x2F;oratab </span><br><span class="line">---------------------------------------------------------</span><br><span class="line">orcl11g:&#x2F;db&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0:N</span><br><span class="line">修改为:</span><br><span class="line">orcl11g:&#x2F;db&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0:Y</span><br></pre></td></tr></table></figure>

<ul>
<li>把lsnrctl start和dbstart添加到rc.local文件中</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@CentOS ~]# vim /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>

<p>添加：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - oracle -lc "/db/app/oracle/product/11.2.0/bin/lsnrctl start"</span><br><span class="line">su - oracle -lc "/db/app/oracle/product/11.2.0/bin/dbstart"</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明:</p>
<p>第一行为开机启动数据库监听服务，第二行为开机启动数据库</p>
</blockquote>
<blockquote>
<p>注意：CentOs7中/etc/rc.d/rc.local不会开机执行，需添加执行权限</p>
</blockquote>
<p>查看<code>rc.local</code>权限:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@CentOS ~]# ll /etc/rc.d/rc.local </span><br><span class="line">-rw-r--r--. 1 root root 600 5月  29 09:13 /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>

<p>可以发现并没有执行权限，现在添加执行权限：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>

<p>至此，Oracle的开机自启就完成了，执行<code>reboot</code>重启之后查看是否自启动成功：</p>
<p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200529084747.png" alt=""></p>
<p>查看Oracle服务状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@CentOS ~]$ ps -aux | grep oracle</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200529084749.png" alt=""></p>
<blockquote>
<p>注：设置Oracle开机自启之后虽然可以监听到实例，但是不能通过Navicat远程连接，需要执行oracle的关闭和开启操作之后才能正常远程连接，原因可能是启动了阻塞实例？</p>
</blockquote>
<h3 id="Linux下Oracle的启动和关闭"><a href="#Linux下Oracle的启动和关闭" class="headerlink" title="Linux下Oracle的启动和关闭"></a>Linux下Oracle的启动和关闭</h3><ul>
<li>启动的时候先启动oracle，然后启动监听器，即：startup-&gt;lsnrctl start</li>
<li>关闭的时候先关闭监听器，然后在关闭oracle,即：lsnrctl stop-&gt;shutdown</li>
</ul>
<h3 id="解决Linux下数据库插入中文乱码问题"><a href="#解决Linux下数据库插入中文乱码问题" class="headerlink" title="解决Linux下数据库插入中文乱码问题"></a>解决Linux下数据库插入中文乱码问题</h3><p>首先以系统DBA权限登录sqlplus</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlplus /nolog</span><br><span class="line">conn /as sysdba</span><br></pre></td></tr></table></figure>

<p>查看数据库编码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select userenv('language') from dual;</span><br></pre></td></tr></table></figure>

<p>结果为：AMERICAN_AMERICA.WE8MSWIN1252 ，这种编码中文会乱码。</p>
<p>修改数据库编码方式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> shutdown immediate;</span></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> startup mount;</span></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> alter system <span class="built_in">enable</span> restricted session;</span></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> alter system <span class="built_in">set</span> job_queue_processes=0;</span></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> alter database open;</span></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> alter database character <span class="built_in">set</span> internal_use AL32UTF8; <span class="comment">#AL32UTF8或者ZHS16GBK都行</span></span></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> shutdown immediate;</span></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> startup</span></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> alter system <span class="built_in">disable</span> restricted session;</span></span><br></pre></td></tr></table></figure>

<p>此时，查看数据库编码:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> select userenv(<span class="string">'language'</span>) from dual;</span></span><br><span class="line"></span><br><span class="line">USERENV('LANGUAGE')</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">AMERICAN_AMERICA.AL32UTF8</span><br></pre></td></tr></table></figure>

<h3 id="错误一揽子"><a href="#错误一揽子" class="headerlink" title="错误一揽子"></a>错误一揽子</h3><h4 id="ORA-01034"><a href="#ORA-01034" class="headerlink" title="ORA-01034"></a>ORA-01034</h4><ul>
<li>错误原因，数据库未启动，查询v$instance报错</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR at line 1:</span><br><span class="line">ORA-01034: ORACLE not available</span><br><span class="line">Process ID: 0</span><br><span class="line">Session ID: 0 Serial number: 0</span><br></pre></td></tr></table></figure>

<p>启动数据库-报错:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> startup mount</span></span><br><span class="line">ORA-01078: failure in processing system parameters</span><br><span class="line">LRM-00109: could not open parameter file '/db/app/oracle/product/11.2.0/dbs/initorcl.ora'</span><br></pre></td></tr></table></figure>

<p>转<code>LRM-00109</code>解决方法</p>
<h4 id="LRM-00109"><a href="#LRM-00109" class="headerlink" title="LRM-00109"></a>LRM-00109</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> startup </span></span><br><span class="line">ORA-01078: failure in processing system parameters</span><br><span class="line">LRM-00109: could not open parameter file '/db/app/oracle/product/11.2.0/dbs/initorcl.ora'</span><br></pre></td></tr></table></figure>

<ul>
<li><p>错误原因：在oracle9i、10g、11g最近几个版本中，数据库默认使用spfile启动数据库，如果spfile不存在，则就会出现上述错误。</p>
</li>
<li><p>解决办法：</p>
<p>查询pfile文件位置，将pfile目录中的init.ora.2182020183512形式的文件copy到$ORACLE_HOME/dbs目录下命名为initorcl.ora即可。具体操作如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@CentOS ~]$ echo $ORACLE_BASE</span><br><span class="line">/db/app/oracle</span><br><span class="line">[oracle@CentOS ~]$ find /db/app/oracle -name pfile</span><br><span class="line">/db/app/oracle/admin/orcl11g/pfile</span><br><span class="line">[oracle@localhost ~]$ cd /db/app/oracle/admin/orcl11g/pfile</span><br><span class="line">[oracle@localhost pfile]$ ls</span><br><span class="line">init.ora.428202010617</span><br><span class="line">[oracle@localhost pfile]$ cp init.ora.428202010617 /db/app/oracle/product/11.2.0/dbs/initorcl.ora</span><br><span class="line">[oracle@localhost pfile]$</span><br></pre></td></tr></table></figure>
<p>此操作之后数据库startup mount出现如下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ORACLE instance started.</span><br><span class="line">      </span><br><span class="line">Total System Global Area 1586708480 bytes</span><br><span class="line">Fixed Size		    2213736 bytes</span><br><span class="line">Variable Size		  922749080 bytes</span><br><span class="line">Database Buffers	  654311424 bytes</span><br><span class="line">Redo Buffers		    7434240 bytes</span><br><span class="line">ORA-00205: error in identifying control file, check alert log for more info</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="ORA-00845"><a href="#ORA-00845" class="headerlink" title="ORA-00845"></a>ORA-00845</h4><p>在oracle 11g中新增的内存自动管理的参数MEMORY_TARGET,它能自动调整SGA和PGA，这个特性需要用到/dev/shm共享文件系统，而且要求/dev/shm必须大于MEMORY_TARGET，如果/dev/shm比MEMORY_TARGET小就会报错</p>
<p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200528153248.png" alt=""> </p>
<ul>
<li>解决方案</li>
</ul>
<p>解决的办法之一是增加tmpfs文件系统的容量:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@CentOS ~]# mount -t tmpfs tmpfs -o size=4g /dev/shm</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考文章:</p>
<p><a href="https://blog.csdn.net/yjj_xss/article/details/104977384" target="_blank" rel="noopener">https://blog.csdn.net/yjj_xss/article/details/104977384</a></p>
<p><a href="https://blog.csdn.net/russ44/article/details/52137799" target="_blank" rel="noopener">https://blog.csdn.net/russ44/article/details/52137799</a></p>
</blockquote>
<h4 id="ORA-01102"><a href="#ORA-01102" class="headerlink" title="ORA-01102"></a>ORA-01102</h4><p>错误如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> startup mount</span></span><br><span class="line">ORACLE instance started.</span><br><span class="line">    </span><br><span class="line">Total System Global Area 1586708480 bytes</span><br><span class="line">Fixed Size		    2213736 bytes</span><br><span class="line">Variable Size		  922749080 bytes</span><br><span class="line">Database Buffers	  654311424 bytes</span><br><span class="line">Redo Buffers		    7434240 bytes</span><br><span class="line">ORA-01102: cannot mount database in EXCLUSIVE mode</span><br></pre></td></tr></table></figure>

<ul>
<li><p>可能原因：</p>
<pre><code>Oracle被异常关闭时，有资源没有被释放
1） Oracle的共享内存段或信号量没有被释放；
2） Oracle的后台进程（如SMON、PMON、DBWn等）没有被关闭；
3） 用于锁内存的文件lk和sgadef.dbf文件没有被删除。</code></pre><ul>
<li><p>解决思路：<br>如果是HA系统，检查其他节点是否已经启动实例检查Oracle进程是否存在，如果存在则杀掉进程检查信号量是否存在，如果存在，则清除信号量；<br>检查共享内存段是否存在，如果存在，则清除共享内存段；<br>检查锁内存文件lk和sgadef.dbf是否存在，如果存在，则删除.</p>
</li>
<li><p>此处我依靠下面的步骤解决掉了该问题（我遇到的问题是存在锁文件和共享内存段问题）：</p>
</li>
</ul>
</li>
<li><p>如果存在lk和sgadef.dbf文件，则删除</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost dbs]$  cd $ORACLE_HOME/dbs</span><br><span class="line">[oracle@localhost dbs]$  ls lk*</span><br><span class="line">lkORCL11G</span><br><span class="line">[oracle@localhost dbs]$  rm lk*</span><br></pre></td></tr></table></figure>

<p> 再次启动时又遇到下面的错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> startup</span></span><br><span class="line">ORACLE instance started.</span><br><span class="line">        </span><br><span class="line">Total System Global Area 1586708480 bytes</span><br><span class="line">Fixed Size		    2213736 bytes</span><br><span class="line">Variable Size		  922749080 bytes</span><br><span class="line">Database Buffers	  654311424 bytes</span><br><span class="line">Redo Buffers		    7434240 bytes</span><br><span class="line">ORA-00205: error in identifying control file, check alert log for more info</span><br></pre></td></tr></table></figure>

<h4 id="ORA-00205"><a href="#ORA-00205" class="headerlink" title="ORA-00205"></a>ORA-00205</h4><blockquote>
<p>此问题比较复杂，最后不知道是哪个方法起效了</p>
</blockquote>
<h5 id="情况1："><a href="#情况1：" class="headerlink" title="情况1："></a>情况1：</h5><p>由于数据库控制文件之一不正确</p>
<ul>
<li>解决方法：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> show parameter control_files</span></span><br><span class="line">NAME                                 TYPE        VALUE</span><br><span class="line">------------------------------------ ----------- ------------------------------</span><br><span class="line">control_files                        string      /u01/app/oracle/oradata/RTS/co</span><br><span class="line">                                                  ntrol01.ctl, /u01/app/oracle/o</span><br><span class="line">                                                  radata/RTS/control02.ctl</span><br></pre></td></tr></table></figure>

<p>可以看到存在两个控制文件，判断哪个控制文件不可用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">[oracle@PR]$</span><span class="bash"> ll /u01/app/oracle/oradata/RTS/control01.ctl</span></span><br><span class="line">-rw-r-----. 1 oracle oinstall 9748480 Jun 24 03:37 /u01/app/oracle/oradata/RTS/control01.ctl</span><br><span class="line"><span class="meta">[oracle@PR]$</span><span class="bash"> ll /u01/app/oracle/oradata/RTS/control02.ctl</span></span><br><span class="line">ls: cannot access /u01/app/oracle/oradata/RTS/control02.ctl: No such file or directory</span><br></pre></td></tr></table></figure>
<p>可以看到，control02.ctl是不可用的，进行修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> alter system <span class="built_in">set</span> control_files=<span class="string">'/u01/app/oracle/oradata/RTS/control01.ctl'</span> scope=spfile;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，此时可能会出现 <code>ORA-32001</code>错误</p>
</blockquote>
<p>关闭，并重启oracle</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> shut immediate;</span></span><br><span class="line">ORA-01507: database not mounted</span><br><span class="line">ORACLE instance shut down.</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> startup</span></span><br><span class="line">ORACLE instance started.</span><br><span class="line">ORA-00205......</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该方法对我这种情况好像并没有什么卵用–</p>
</blockquote>
<h5 id="情况2"><a href="#情况2" class="headerlink" title="情况2:"></a>情况2:</h5><p>打开日志文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost orcl]$ cd /db/app/oracle/diag/rdbms/orcl11g/orcl/trace</span><br><span class="line">[oracle@localhost trace]$ vim alert_orcl.log</span><br></pre></td></tr></table></figure>

<p>可以看到如下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ALTER DATABASE   MOUNT</span><br><span class="line">ORA-00210: cannot open the specified control file</span><br><span class="line">ORA-00202: control file: '/db/app/oracle/oradata/orcl11g/control01.ctl'</span><br><span class="line">ORA-27086: unable to lock file - already in use</span><br><span class="line">Linux-x86_64 Error: 11: Resource temporarily unavailable</span><br><span class="line">Additional information: 8</span><br><span class="line">Additional information: 13879</span><br><span class="line">ORA-205 signalled during: ALTER DATABASE   MOUNT...</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解决思路</p>
<p>查看<code>$ORACLE_HOME/dbs</code>文件夹下是否存在<code>lk*</code>和<code>sgadef.dbf</code>文件，如果存在，删除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost dbs]$ ps -ef | grep ora_ | grep -v grep</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">oracle    13857      1  0 16:40 ?        00:00:02 ora_pmon_orcl11g</span><br><span class="line">oracle    13859      1  0 16:40 ?        00:00:25 ora_vktm_orcl11g</span><br><span class="line">oracle    13863      1  0 16:40 ?        00:00:00 ora_gen0_orcl11g</span><br><span class="line">oracle    13865      1  0 16:40 ?        00:00:00 ora_diag_orcl11g</span><br><span class="line">oracle    13867      1  0 16:40 ?        00:00:00 ora_dbrm_orcl11g</span><br><span class="line">oracle    13869      1  0 16:40 ?        00:00:01 ora_psp0_orcl11g</span><br><span class="line">oracle    13871      1  0 16:40 ?        00:00:02 ora_dia0_orcl11g</span><br><span class="line">oracle    13873      1  0 16:40 ?        00:00:00 ora_mman_orcl11g</span><br><span class="line">oracle    13875      1  0 16:40 ?        00:00:00 ora_dbw0_orcl11g</span><br><span class="line">oracle    13877      1  0 16:40 ?        00:00:00 ora_lgwr_orcl11g</span><br><span class="line">oracle    13879      1  0 16:40 ?        00:00:02 ora_ckpt_orcl11g</span><br><span class="line">oracle    13881      1  0 16:40 ?        00:00:00 ora_smon_orcl11g</span><br><span class="line">oracle    13883      1  0 16:40 ?        00:00:00 ora_reco_orcl11g</span><br><span class="line">oracle    13885      1  0 16:40 ?        00:00:01 ora_mmon_orcl11g</span><br><span class="line">oracle    13887      1  0 16:40 ?        00:00:02 ora_mmnl_orcl11g</span><br><span class="line">oracle    13889      1  0 16:40 ?        00:00:00 ora_d000_orcl11g</span><br><span class="line">oracle    13891      1  0 16:40 ?        00:00:00 ora_s000_orcl11g</span><br><span class="line">oracle    13930      1  0 16:40 ?        00:00:00 ora_qmnc_orcl11g</span><br><span class="line">oracle    13945      1  0 16:40 ?        00:00:01 ora_cjq0_orcl11g</span><br><span class="line">oracle    13959      1  0 16:40 ?        00:00:00 ora_q000_orcl11g</span><br><span class="line">oracle    13961      1  0 16:40 ?        00:00:00 ora_q001_orcl11g</span><br><span class="line">oracle    14005      1  0 16:50 ?        00:00:01 ora_smco_orcl11g</span><br><span class="line">oracle    29258      1  0 18:59 ?        00:00:00 ora_pmon_orcl</span><br><span class="line">oracle    29260      1  0 18:59 ?        00:00:01 ora_vktm_orcl</span><br><span class="line">oracle    29264      1  0 18:59 ?        00:00:00 ora_gen0_orcl</span><br><span class="line">oracle    29266      1  0 18:59 ?        00:00:00 ora_diag_orcl</span><br><span class="line">oracle    29268      1  0 18:59 ?        00:00:00 ora_dbrm_orcl</span><br><span class="line">oracle    29270      1  0 18:59 ?        00:00:00 ora_psp0_orcl</span><br><span class="line">oracle    29272      1  0 18:59 ?        00:00:00 ora_dia0_orcl</span><br><span class="line">oracle    29274      1  0 18:59 ?        00:00:00 ora_mman_orcl</span><br><span class="line">oracle    29276      1  0 18:59 ?        00:00:00 ora_dbw0_orcl</span><br><span class="line">oracle    29278      1  0 18:59 ?        00:00:00 ora_lgwr_orcl</span><br><span class="line">oracle    29280      1  0 18:59 ?        00:00:00 ora_ckpt_orcl</span><br><span class="line">oracle    29282      1  0 18:59 ?        00:00:00 ora_smon_orcl</span><br><span class="line">oracle    29284      1  0 18:59 ?        00:00:00 ora_reco_orcl</span><br><span class="line">oracle    29286      1  0 18:59 ?        00:00:00 ora_mmon_orcl</span><br><span class="line">oracle    29288      1  0 18:59 ?        00:00:00 ora_mmnl_orcl</span><br><span class="line">oracle    29290      1  0 18:59 ?        00:00:00 ora_d000_orcl</span><br><span class="line">oracle    29292      1  0 18:59 ?        00:00:00 ora_s000_orcl</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost dbs]$ kill -9 13857  </span><br><span class="line">[oracle@localhost dbs]$ kill -9 29258</span><br><span class="line">[oracle@localhost dbs]$ ipcs -m</span><br><span class="line">      </span><br><span class="line">------ Shared Memory Segments --------</span><br><span class="line">key        shmid      owner      perms      bytes      nattch     status      </span><br><span class="line">0x087c7b68 7          oracle     660        4096       0     </span><br><span class="line">      </span><br><span class="line">[oracle@localhost dbs]$ ipcs -map</span><br><span class="line">------ Message Queues PIDs --------</span><br><span class="line">msqid      owner      lspid      lrpid     </span><br><span class="line">      </span><br><span class="line">------ Shared Memory Creator/Last-op PIDs --------</span><br><span class="line">shmid      owner      cpid       lpid      </span><br><span class="line">7          oracle     13829      13863</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost dbs]$ ipcrm -m 7</span><br><span class="line"> [oracle@localhost dbs]$ ipcs -s</span><br><span class="line">      </span><br><span class="line">------ Semaphore Arrays --------</span><br><span class="line">key        semid      owner      perms      nsems     </span><br><span class="line">      </span><br><span class="line">[oracle@localhost dbs]$ ipcs -m</span><br><span class="line">      </span><br><span class="line">------ Shared Memory Segments --------</span><br><span class="line">key        shmid      owner      perms      bytes      nattch     status</span><br></pre></td></tr></table></figure>

<p>此时启动Oracle</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> startup mount </span></span><br><span class="line">ORACLE instance started.</span><br><span class="line">      </span><br><span class="line">Total System Global Area 1586708480 bytes</span><br><span class="line">Fixed Size		    2213736 bytes</span><br><span class="line">Variable Size		  922749080 bytes</span><br><span class="line">Database Buffers	  654311424 bytes</span><br><span class="line">Redo Buffers		    7434240 bytes</span><br><span class="line">Database mounted.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>本部分参考文章:</p>
<p><a href="https://blog.csdn.net/yjj_xss/article/details/104977384" target="_blank" rel="noopener">https://blog.csdn.net/yjj_xss/article/details/104977384</a></p>
<p><a href="https://www.cnblogs.com/suifu/p/5823099.html" target="_blank" rel="noopener">https://www.cnblogs.com/suifu/p/5823099.html</a></p>
<p><a href="https://dbatricksworld.com/ora-00205-error-in-identifying-control-file-check-alert-log-for-more-info" target="_blank" rel="noopener">https://dbatricksworld.com/ora-00205-error-in-identifying-control-file-check-alert-log-for-more-info</a></p>
</blockquote>
<h4 id="ORA-32001"><a href="#ORA-32001" class="headerlink" title="ORA-32001"></a>ORA-32001</h4><p>在执行命令时可能出现<code>ORA-32001: write to SPFILE requested but no SPFILE is in use</code></p>
<p>解决：</p>
<ol>
<li><p>查看是否有<code>spfile</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash">show parameter spfile;</span></span><br><span class="line"></span><br><span class="line">NAME            TYPE              VALUE            </span><br><span class="line">------------------------------------ -----</span><br><span class="line">spfile          string</span><br></pre></td></tr></table></figure>
</li>
<li><p>从pfile创建spfile</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash">create spfile from pfile;</span></span><br><span class="line">File created.</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭并重启数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash">shutdown immediate;</span></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash">startup mount</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看是否有<code>spfile</code>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash">show parameter spfile;</span></span><br><span class="line"></span><br><span class="line">NAME                TYPE            VALUE</span><br><span class="line">------------------------------------ ----------------------</span><br><span class="line">spfile              string         db/app/oracle/product/11.2.0/dbs/spfilePROD.ora</span><br></pre></td></tr></table></figure>
</li>
<li><p>再次执行需要执行的命令，发现该错误已解决。</p>
</li>
</ol>
<h4 id="ORA-01109"><a href="#ORA-01109" class="headerlink" title="ORA-01109"></a>ORA-01109</h4><p>在数据库未打开时对数据库进行操作会收到<code>ORA-01109</code>错误</p>
<p>使用如下命令打开数据库即可:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alter database open;</span><br></pre></td></tr></table></figure>

<h4 id="The-listener-supports-no-services"><a href="#The-listener-supports-no-services" class="headerlink" title="The listener supports no services"></a>The listener supports no services</h4><p>使用<code>lsnrctl status</code>命令时可能会出现<code>The listener supports no services</code></p>
<p>问题原因：数据库实例没有注册到<code>listner</code></p>
<ul>
<li><p>解决方法一：</p>
<p>登录数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@CentOS ~]$ sqlplus /nolog</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> conn / as sysdba</span></span><br></pre></td></tr></table></figure>

<p>强制注册服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash">alter system register;</span></span><br></pre></td></tr></table></figure>

<p>查看监听状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@CentOS ~]$ lsnrctl status</span><br></pre></td></tr></table></figure>
</li>
<li><p>解决方法二：</p>
<p>在<code>listener.ora</code>中添加如下代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SID_LIST_LISTENER =  </span><br><span class="line">(SID_LIST =  </span><br><span class="line">  (SID_DESC =  </span><br><span class="line">  (GLOBAL_DBNAME = orcl)</span><br><span class="line">  (SID_NAME = orcl)</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注1：里面的orcl根据安装的数据库实例名确定</p>
</blockquote>
<blockquote>
<p>注2：此方法我并没有使用，不确定是否有效</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>环境搭建</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>[论文笔记1]--差分隐私保护参数ε的选取研究</title>
    <url>/2020/05/19/%E8%AE%BA%E6%96%87%E7%AC%94%E8%AE%B01-%E5%B7%AE%E5%88%86%E9%9A%90%E7%A7%81%E4%BF%9D%E6%8A%A4%E5%8F%82%E6%95%B0%CE%B5%E7%9A%84%E9%80%89%E5%8F%96%E7%A0%94%E7%A9%B6/</url>
    <content><![CDATA[<blockquote>
<p>文章: 差分隐私保护参数ε的选取研究 . 通信学报.Vol.36 No.12 . 2015</p>
</blockquote>
<h2 id="主要工作"><a href="#主要工作" class="headerlink" title="主要工作"></a>主要工作</h2><ol>
<li>给出一个选取参数$\epsilon$<strong>上界</strong>的一个计算式<ul>
<li>该计算式只需要 查询函数敏感度$\Delta f$, 查询容错区间长度$L$ 和 攻击者成功概率$\rho$。</li>
</ul>
</li>
<li>提出一个差分隐私保护的攻击算法–根据查询语句的返回值来回答攻击对象是否在查询集合中。<a id="more"></a>

</li>
</ol>
<h2 id="攻击模型"><a href="#攻击模型" class="headerlink" title="攻击模型"></a>攻击模型</h2><h3 id="准备知识"><a href="#准备知识" class="headerlink" title="准备知识"></a>准备知识</h3><p>攻击者针对攻击对象提出一个查询问题$q$,数据库拥有者根据问题将查询结果$q(D)$添加<code>服从Laplace分布的噪音x</code>之后返回给攻击者。</p>
<p>因为每个噪音都是满足<code>Laplace分布</code>的，因此对于攻击者而言不可能准确的猜出这个$x$,但是考虑到一些函数的特点，攻击者只需要猜出$x$落在某个范围内即可。以<strong>count</strong>查询为例，只要噪音$x$落在$[-0.5,0.5]$之间，攻击者便很容易得知真实值$q(D)$,从而得知攻击对象是否在查询结果中的结论。</p>
<p>将$[-0.5,0.5]$称为<strong>count</strong>查询的容错区间，区间的半长度记为$L$.</p>
<img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200519162302.png" style="zoom:40%;" />

<p>根据上图的显示的<code>Laplace概率密度函数</code>图像可以看出，位置参数$u$对于攻击者是没有影响的，而参数$b=\frac{\Delta f}{\epsilon}$直接影响了攻击的难易程度。</p>
<p>显而易见，<strong>当参数$b$比较小时，经过$Laplace$采样的数据$x$比较靠近位置参数$u$,</strong>相反，当参数$b$足够大时，采样数据$x$相当于平均分布在$(-\infty,\infty)$上，对于攻击者来说是很困难的。</p>
<h3 id="相关定理"><a href="#相关定理" class="headerlink" title="相关定理"></a>相关定理</h3><blockquote>
<p><strong>定理1：</strong>若用拉普拉斯分布给$q(D)$添加噪音$x$,则$q(D)+x$落在$(-\infty,q(D)+u+L)$概率为$1-\frac12exp(-\frac{L\epsilon}{\Delta f})$</p>
</blockquote>
<ul>
<li><strong>证明：</strong>$q(D)+x$落在区间$(-\infty,q(D)+u+L)$上的概率等于$x$落在区间$(-\infty,u+L)$的概率，依据$Laplace$累计分布函数，$x$落在区间$(-\infty,u+L)$的概率为$F(u+L)=0.5+0.5(1-exp(-\frac{L}{b}))=1-\frac12exp(-\frac{L}{b})$,将$b=\frac{\Delta f}{\epsilon}$代入，则可证出上述定理。</li>
</ul>
<blockquote>
<p><strong>定理2：</strong>以下攻击算法对于$count$查询的成功的概率是$1-\frac12exp(-\frac{\epsilon}2)$</p>
</blockquote>
<blockquote>
<p>该定理以$count$统计查询为例,其他<strong>统计函数</strong>也可以类似得到。攻击者可以根据返回值的大小来确定攻击对象是否在结果集中。</p>
</blockquote>
<ul>
<li><p><strong>攻击算法：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Attack Algorithm For Count Query</span><br><span class="line">Input: A(q(D)) &#x3D; x + q(D)</span><br><span class="line">Output: Present or Absence</span><br><span class="line">Method:</span><br><span class="line">&#x2F;* Laplace f(μ,b) distribution, and q(D) ∈ &#123;m,m+1&#125;*&#x2F;</span><br><span class="line">1) y &#x3D; x + q(D)</span><br><span class="line">2) if y∈[m+0.5,+∞)</span><br><span class="line">3) return Present</span><br><span class="line">4) else</span><br><span class="line">5) return Absence</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>证明：</strong>假设$q(D)=m$或者$m+1$，给定$q(D)+x$考虑两个区间$(-\infty,m+0.5]$和$[m+0.5,+\infty]$，根据<code>定理1</code>,若$q(D)=m$,则$q(D)+x$落在第一个区间的概率为$1-\frac12exp(-\frac{\epsilon}2)$.</p>
<p>若$q(D)=m+1$,则$q(D)+x$落在第二个区间的概率与$q(D)=m$落入第一个区间的的可能性相同.</p>
<blockquote>
<p>$q(D)=m+1$时$q(D)+x$落入第一个区间的可能性求法如下：</p>
<p>$q(D)=m+1$落入$(-\infty,m+0.5]$区间的概率即落入$(-\infty,q(D)+u+(-0.5)]$,等价于$x$落入$(-\infty,-0.5)$的概率。</p>
<p>根据$Laplace$的累积分布函数$F(x)=0.5+0.5sgn(x-\mu)(1-exp\frac{-|x-\mu|}{b})$,可得$q(D)=m+1$落入第一个区间的概率为$\frac12exp(-\frac{\epsilon}{2})$。</p>
</blockquote>
<h2 id="参数-epsilon-的选取"><a href="#参数-epsilon-的选取" class="headerlink" title="参数$\epsilon$的选取"></a>参数$\epsilon$的选取</h2><p>对于一般的查询函数，由上面的攻击算法可以推导出攻击者能够成功的概率为$1-\frac12exp(-\frac{L\epsilon}{\Delta q})$.</p>
<p>即<strong>参数</strong>$\epsilon$的选取，只要攻击者的成功概率$\rho \le(1-\frac12exp(-\frac{L\epsilon}{\Delta q}))$,解不等式，得出<strong>参数</strong>$\epsilon$选取上界满足如下条件：<br>$$<br>\epsilon\le \frac{1n2(1-\rho)\Delta q}{L}<br>$$<br>上式给出的参数$\epsilon$与<code>数据集大小无关</code>只与查询函数$(\Delta q,L)$和攻击者的成功率$\rho$有关。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>差分隐私</category>
      </categories>
      <tags>
        <tag>差分隐私</tag>
        <tag>论文笔记</tag>
      </tags>
  </entry>
</search>
