<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+NexT搭建个人博客</title>
    <url>/2020/05/07/Hexo-NexT%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>安装 Hexo 前要先安装：</p>
<ul>
<li>Node.js</li>
<li>Git<a id="more"></a>


</li>
</ul>
<h2 id="在GitHub-上搭建个人博客"><a href="#在GitHub-上搭建个人博客" class="headerlink" title="在GitHub 上搭建个人博客"></a>在GitHub 上搭建个人博客</h2><h3 id="GitHub创建仓库"><a href="#GitHub创建仓库" class="headerlink" title="GitHub创建仓库"></a>GitHub创建仓库</h3><p>新建一个名为<code>用户名.github.io</code>的仓库，如<code>CloudMadao.github.io</code>,以后可以通过<a href="https://CloudMadao.github.io" target="_blank" rel="noopener">https://CloudMadao.github.io</a> 访问自己的个人博客。</p>
<p>注意：仓库中的用户名对大小写敏感</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure>

<h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h3><p>进入博客文件夹(CloudMadao)，执行如下命令进行初始化：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd D:/CloudMadao</span><br><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>执行初始化命令之后Hexo会下载一些文件到这个文件夹下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-rw-r--r-- 1 admin 197121  2468  5月  7 13:59 _config.yml</span><br><span class="line">drwxr-xr-x 1 admin 197121     0  5月  7 14:01 node_modules/</span><br><span class="line">-rw-r--r-- 1 admin 197121   602  5月  7 13:59 package.json</span><br><span class="line">-rw-r--r-- 1 admin 197121 75419  5月  7 14:01 package-lock.json</span><br><span class="line">drwxr-xr-x 1 admin 197121     0  5月  7 13:59 scaffolds/</span><br><span class="line">drwxr-xr-x 1 admin 197121     0  5月  7 13:59 source/</span><br><span class="line">drwxr-xr-x 1 admin 197121     0  5月  7 13:59 themes/</span><br></pre></td></tr></table></figure>

<p>注意：hexo中存在两个<code>_config.yml</code>文件，一个存在于根目录CloudMadao下，称为<code>站点配置文件</code>，另一个存在于theme下，称为<code>主题配置文件</code></p>
<p>初始化Hexo之后即可以生成博客和预览博客</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g #生成</span><br><span class="line">hexo s #启动Hexo服务</span><br></pre></td></tr></table></figure>

<p>在本地启动Hexo服务之后，访问<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 可以看到初始化的博客内容。</p>
<h3 id="将博客部署到GitHub"><a href="#将博客部署到GitHub" class="headerlink" title="将博客部署到GitHub"></a>将博客部署到GitHub</h3><p>在站点配置文件<code>_config.yml</code>,中修改deploy部分：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">'git'</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://github.com/CloudMadao/CloudMadao.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<p>注意：配置文件为yaml格式，需要注意缩进</p>
<p>执行 <code>hexo d</code>将博客部署到GitHub，若是出现如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Deployer not found: git</span><br></pre></td></tr></table></figure>

<p>需要安装相关插件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>将博客部署到GitHub上之后，访问<a href="https://cloudmadao.github.io/即可访问" target="_blank" rel="noopener">https://cloudmadao.github.io/即可访问</a></p>
<hr>
<h2 id="NexT主题配置"><a href="#NexT主题配置" class="headerlink" title="NexT主题配置"></a>NexT主题配置</h2><h3 id="设置hexo的next主题"><a href="#设置hexo的next主题" class="headerlink" title="设置hexo的next主题"></a>设置hexo的next主题</h3><p>将站点配置文件_config.xml中的theme: landscape改为theme: NexT</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">NexT</span> <span class="comment">#NexT为下载的next主题位置</span></span><br></pre></td></tr></table></figure>

<h3 id="配置网站相关信息"><a href="#配置网站相关信息" class="headerlink" title="配置网站相关信息"></a>配置网站相关信息</h3><p>修改站点配置文件<code>_config.yml</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Madao's</span> <span class="string">Personal</span> <span class="string">Website</span>       <span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">'今天 &lt;s&gt;摸鱼&lt;/s&gt; 学习了吗'</span>  <span class="comment"># 网站副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">'Constant dropping wears the stone'</span>  <span class="comment"># 描述，介绍网站的</span></span><br><span class="line"><span class="attr">keywords:</span>       <span class="comment"># 网站的关键字</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">摸鱼选手Madao</span>  <span class="comment"># 博主姓名</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-Hans</span> <span class="comment"># 语言：zh-CN 是简体中文</span></span><br><span class="line"><span class="attr">timezone:</span>   <span class="comment"># 时区</span></span><br></pre></td></tr></table></figure>

<p>修改主题配置文件<code>_config.yml</code>,使用nexT的Pisces主题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure>

<h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><h4 id="开启标签和分类页面："><a href="#开启标签和分类页面：" class="headerlink" title="开启标签和分类页面："></a>开启标签和分类页面：</h4><p>标签：</p>
<p>创建tags和页面</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<p>修改tags中的<code>index.md</code>文件(categories类似)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2020-05-07 16:00:51</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<h4 id="配置hexo本地搜索"><a href="#配置hexo本地搜索" class="headerlink" title="配置hexo本地搜索"></a>配置hexo本地搜索</h4><p>安装<code>hexo-generator-searchdb</code>插件</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-generator</span><span class="literal">-searchdb</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure>

<p>修改站点配置文件<code>_config.yml</code>,添加如下内容</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本地搜索</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>

<p>修改主题配置文件<code>_config.yml</code>,开启<code>local_search</code></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#开启本地搜索</span></span><br></pre></td></tr></table></figure>

<h4 id="配置头像"><a href="#配置头像" class="headerlink" title="配置头像"></a>配置头像</h4><p>编辑主题配置文件<code>_config.yml</code>,修改其中的<code>avatar</code>字段</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将头像文件 Sakai Izumi2.png 放置在主题目录的source/images目录下</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/Sakai</span> <span class="string">Izumi2.png</span></span><br></pre></td></tr></table></figure>

<h4 id="配置社交链接"><a href="#配置社交链接" class="headerlink" title="配置社交链接"></a>配置社交链接</h4><p>修改主题配置文件中的Social字段，显示相关社交账号</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/example</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:example@hotmail.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br></pre></td></tr></table></figure>

<h4 id="首页博客显示摘要"><a href="#首页博客显示摘要" class="headerlink" title="首页博客显示摘要"></a>首页博客显示摘要</h4><p>NexT7.6之后移除了截断文章作为的摘要功能，现在我们可以通过<code>&lt;!--more--&gt;</code>来精确控制摘要的内容:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; 2020.5.4 奇怪的知识增加了</span><br><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure>

<p>添加<!--more-->之后，将会以该标签之前的文本作为摘要内容。</p>
<h4 id="页面阅读统计"><a href="#页面阅读统计" class="headerlink" title="页面阅读统计"></a>页面阅读统计</h4><p>修改主题配置文件<code>_config.yml</code>中的<code>busuanzi_count</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span>              <span class="comment"># 设true 开启</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span>       <span class="comment"># 总阅读人数（uv数）</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">user</span>  <span class="comment"># 阅读总人数的图标</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span>          <span class="comment"># 总阅读次数（pv数）</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">eye</span>      <span class="comment"># 阅读总次数的图标</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span>           <span class="comment"># 开启内容阅读次数</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">eye</span>       <span class="comment"># 内容页阅读数的图标</span></span><br></pre></td></tr></table></figure>

<h4 id="背景动画设置"><a href="#背景动画设置" class="headerlink" title="背景动画设置"></a>背景动画设置</h4><p><strong>Canvas-nest</strong></p>
<p>在站点目录下CloudMadao/source/_data创建一个<code>footer.swig</code>文件,若是<code>_data</code>目录不存在先创建目录.</p>
<p>在<code>footer.swig</code>文件下添加如下内容</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;script color=<span class="string">"0,0,255"</span> opacity=<span class="string">"0.5"</span> zIndex=<span class="string">"-1"</span> count=<span class="string">"99"</span> </span><br><span class="line">        src="https://cdn.jsdelivr.net/npm/canvas-nest.js@1/dist/canvas-nest.js"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>在主题配置文件中启用该文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="string">source/_data/footer.swig</span></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次CentOs7上安装Oracle的踩坑过程</title>
    <url>/2020/05/29/%E8%AE%B0%E4%B8%80%E6%AC%A1CentOs7%E4%B8%8A%E5%AE%89%E8%A3%85Oracle%E7%9A%84%E8%B8%A9%E5%9D%91%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h3 id="安装环境："><a href="#安装环境：" class="headerlink" title="安装环境："></a>安装环境：</h3><p>操作系统：CentOS 7.8<br>Oracle： Oracle 11g </p>
<blockquote>
<p>难装的一批，辣鸡软件！</p>
</blockquote>
<a id="more"></a>



<h3 id="Yum-安装vim软件，用于编辑配置文件（个人习惯）"><a href="#Yum-安装vim软件，用于编辑配置文件（个人习惯）" class="headerlink" title="Yum 安装vim软件，用于编辑配置文件（个人习惯）"></a>Yum 安装vim软件，用于编辑配置文件（个人习惯）</h3>   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install vim -y</span><br></pre></td></tr></table></figure>

<h3 id="安装Oracle-11g依赖包"><a href="#安装Oracle-11g依赖包" class="headerlink" title="安装Oracle 11g依赖包"></a>安装Oracle 11g依赖包</h3>   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install yum install gcc make binutils gcc-c++ compat-libstdc++-33 elfutils-libelf-devel elfutils-libelf-devel-static ksh libaio libaio-devel numactl-devel sysstat unixODBC unixODBC-devel pcre-devel –y</span><br></pre></td></tr></table></figure>

<h3 id="关闭selinux"><a href="#关闭selinux" class="headerlink" title="关闭selinux"></a>关闭selinux</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;selinux&#x2F;config</span><br></pre></td></tr></table></figure>

<p>设置SELINUX=disabled</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setenforce 0</span><br></pre></td></tr></table></figure>

<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<h3 id="添加Oracle用户组和用户"><a href="#添加Oracle用户组和用户" class="headerlink" title="添加Oracle用户组和用户"></a>添加Oracle用户组和用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# groupadd oinstall</span><br><span class="line">[root@localhost ~]# groupadd dba</span><br><span class="line">[root@localhost ~]# groupadd oper</span><br><span class="line">[root@localhost ~]# useradd -g oinstall -G dba,oper oracle</span><br></pre></td></tr></table></figure>

<p>更改oracle密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd oracle</span><br></pre></td></tr></table></figure>

<p>添加完成后查看oracle用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# id oracle</span><br><span class="line">uid=1000(oracle) gid=1000(oinstall) 组=1000(oinstall),1001(dba),1002(oper)</span><br></pre></td></tr></table></figure>

<h3 id="配置HostName"><a href="#配置HostName" class="headerlink" title="配置HostName"></a>配置HostName</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure>

<p>在其中添加如下代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">192.168.192.128 CentOS</span><br></pre></td></tr></table></figure>

<p>测试hostname</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ping -c 3 CentOS</span><br><span class="line">PING CentOS (192.168.192.128) 56(84) bytes of data.</span><br><span class="line">64 bytes from CentOS (192.168.192.128): icmp_seq=1 ttl=64 time=0.063 ms</span><br><span class="line">64 bytes from CentOS (192.168.192.128): icmp_seq=2 ttl=64 time=0.034 ms</span><br><span class="line">64 bytes from CentOS (192.168.192.128): icmp_seq=3 ttl=64 time=0.036 ms</span><br><span class="line"></span><br><span class="line">--- CentOS ping statistics ---</span><br><span class="line">3 packets transmitted, 3 received, 0% packet loss, time 2000ms</span><br></pre></td></tr></table></figure>

<h3 id="修改内核参数"><a href="#修改内核参数" class="headerlink" title="修改内核参数"></a>修改内核参数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/sysctl.conf </span><br><span class="line"></span><br><span class="line">fs.aio-max-nr=1048576</span><br><span class="line">fs.file-max=6815744</span><br><span class="line">kernel.shmall=2097152      </span><br><span class="line">kernel.shmmni=4096  </span><br><span class="line">kernel.shmmax = 2147483648 #其值为内存的一半，单位为byte</span><br><span class="line">kernel.sem=250 32000 100 128</span><br><span class="line">net.ipv4.ip_local_port_range=9000 65500</span><br><span class="line">net.core.rmem_default=262144</span><br><span class="line">net.core.rmem_max=4194304</span><br><span class="line">net.core.wmem_default=262144</span><br><span class="line">net.core.wmem_max=1048586</span><br></pre></td></tr></table></figure>

<p>使参数生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>

<h3 id="修改文件限制"><a href="#修改文件限制" class="headerlink" title="修改文件限制"></a>修改文件限制</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/security/limits.conf</span><br></pre></td></tr></table></figure>
<p>在文件末端添加如下代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">oracle soft nproc 2047</span><br><span class="line">oracle hard nproc 16384</span><br><span class="line">oracle soft nofile 1024</span><br><span class="line">oracle hard nofile 65536</span><br><span class="line">oracle soft stack 10240</span><br></pre></td></tr></table></figure>

<p>其次还需修改<code>/etc/pam.d/login</code>中内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# vim /etc/pam.d/login</span><br><span class="line">session  required   /lib64/security/pam_limits.so</span><br><span class="line">session  required   pam_limits.so</span><br></pre></td></tr></table></figure>

<p>在<code>/etc/profile</code>中添加如下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ $USER = "oracle" ]; then</span><br><span class="line">  if [ $SHELL = "/bin/ksh" ]; then</span><br><span class="line">   ulimit -p 16384</span><br><span class="line">   ulimit -n 65536</span><br><span class="line">  else</span><br><span class="line">   ulimit -u 16384 -n 65536</span><br><span class="line">  fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>使环境变量立即生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# source /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="创建Oracle安装目录"><a href="#创建Oracle安装目录" class="headerlink" title="创建Oracle安装目录"></a>创建Oracle安装目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# mkdir -p /db/app/oracle/product/11.2.0</span><br><span class="line">[root@localhost ~]# mkdir /db/app/oracle/oradata</span><br><span class="line">[root@localhost ~]# mkdir /db/app/oracle/inventory</span><br><span class="line">[root@localhost ~]# mkdir /db/app/oracle/fast_recovery_area</span><br><span class="line">[root@localhost ~]# chown -R oracle:oinstall /db/app/oracle</span><br><span class="line">[root@localhost ~]# chmod -R 775 /db/app/oracle</span><br></pre></td></tr></table></figure>

<h3 id="配置Oracle用户环境变量"><a href="#配置Oracle用户环境变量" class="headerlink" title="配置Oracle用户环境变量"></a>配置Oracle用户环境变量</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# su - oracle</span><br><span class="line">[oracle@localhost ~]$ vim .bash_profile </span><br><span class="line"></span><br><span class="line">umask 022</span><br><span class="line">export ORACLE_HOSTNAME=CentOS</span><br><span class="line">export ORACLE_BASE=/db/app/oracle</span><br><span class="line">export ORACLE_HOME=$ORACLE_BASE/product/11.2.0/</span><br><span class="line">export ORACLE_SID=orcl</span><br><span class="line">export PATH=.:$ORACLE_HOME/bin:$ORACLE_HOME/OPatch:$ORACLE_HOME/jdk/bin:$PATH</span><br><span class="line">export LC_ALL="en_US"</span><br><span class="line">export LANG="en_US"</span><br><span class="line">export NLS_LANG="AMERICAN_AMERICA.UTF8"</span><br><span class="line">export NLS_DATE_FORMAT="YYYY-MM-DD HH24:MI:SS"</span><br></pre></td></tr></table></figure>

<p>配置完使环境变量生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost ~]$ source .bash_profile</span><br></pre></td></tr></table></figure>

<h3 id="解压Oracle文件"><a href="#解压Oracle文件" class="headerlink" title="解压Oracle文件"></a>解压Oracle文件</h3><p>安装unzip</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost db]# yum install -y unzip</span><br></pre></td></tr></table></figure>

<p>解压Oracle</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost db]# unzip linux.x64_11gR2_database_1of2.zip &amp;&amp; unzip linux.x64_11gR2_database_2of2.zip</span><br></pre></td></tr></table></figure>

<p>解压完成后执行以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost db]# cp -R database/response/ /db/app/</span><br><span class="line">[root@localhost app]# chmod -R 755 response</span><br><span class="line">[root@localhost app]# chown -R oracle:oinstall /db/app/</span><br></pre></td></tr></table></figure>

<h3 id="配置db-install-rsp响应模板文件开始静默安装"><a href="#配置db-install-rsp响应模板文件开始静默安装" class="headerlink" title="配置db_install.rsp响应模板文件开始静默安装"></a>配置<code>db_install.rsp</code>响应模板文件开始静默安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost app]$ vim response/db_install.rsp </span><br><span class="line"></span><br><span class="line">oracle.install.option=INSTALL_DB_SWONLY</span><br><span class="line">DECLINE_SECURITY_UPDATES=true</span><br><span class="line">UNIX_GROUP_NAME=oinstall</span><br><span class="line">INVENTORY_LOCATION=/db/app/oracle/inventory</span><br><span class="line">SELECTED_LANGUAGES=en,zh_CN</span><br><span class="line">ORACLE_HOSTNAME=CentOS</span><br><span class="line">ORACLE_HOME=/db/app/oracle/product/11.2.0</span><br><span class="line">ORACLE_BASE=/db/app/oracle</span><br><span class="line">oracle.install.db.InstallEdition=EE</span><br><span class="line">oracle.install.db.isCustomInstall=true</span><br><span class="line">oracle.install.db.DBA_GROUP=dba</span><br><span class="line">oracle.install.db.OPER_GROUP=dba</span><br></pre></td></tr></table></figure>

<h3 id="开始静默安装"><a href="#开始静默安装" class="headerlink" title="开始静默安装"></a>开始静默安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R oracle:oinstall /db/</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost database]$ ./runInstaller -ignorePrereq  -silent -responseFile /db/app/response/db_install.rsp</span><br></pre></td></tr></table></figure>

<p>安装过程可能比较长，可以通过以下命令监听安装日志，如:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -f /db/app/oracle/inventory/logs/installActions2020-05-28_09-42-18AM.log</span><br></pre></td></tr></table></figure>

<p>安装完成会显示如下信息 </p>
<p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200528094822.png" alt=""></p>
<p>按照提示，我们需要执行相应脚本以进行下一步操作:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost database]# sh /db/app/oracle/inventory/orainstRoot.sh </span><br><span class="line">[root@localhost database]# sh /db/app/oracle/product/11.2.0/root.sh</span><br></pre></td></tr></table></figure>

<h3 id="配置静默监听"><a href="#配置静默监听" class="headerlink" title="配置静默监听"></a>配置静默监听</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost ~]$ netca /silent /responsefile /db/app/response/netca.rsp</span><br><span class="line"><span class="meta">#</span><span class="bash">显示如下信息</span></span><br><span class="line">Parsing command line arguments:</span><br><span class="line">    Parameter "silent" = true</span><br><span class="line">    Parameter "responsefile" = /db/app/response/netca.rsp</span><br><span class="line">Done parsing command line arguments.</span><br><span class="line">Oracle Net Services Configuration:</span><br><span class="line">Profile configuration complete.</span><br><span class="line">Oracle Net Listener Startup:</span><br><span class="line">    Running Listener Control: </span><br><span class="line">      /db/app/oracle/product/11.2.0/bin/lsnrctl start LISTENER</span><br><span class="line">    Listener Control complete.</span><br><span class="line">    Listener started successfully.</span><br><span class="line">Listener configuration complete.</span><br><span class="line">Oracle Net Services configuration successful. The exit code is 0</span><br></pre></td></tr></table></figure>

<p>查看监听端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# yum install net-tools</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -tnulp | grep 1521</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200528164450.png" alt=""></p>
<h3 id="静默创建dbca数据库"><a href="#静默创建dbca数据库" class="headerlink" title="静默创建dbca数据库"></a>静默创建dbca数据库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /db/app/response/dbca.rsp</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GDBNAME = "orcl"</span><br><span class="line">SID = "orcl"</span><br><span class="line">SYSPASSWORD = "oracle"</span><br><span class="line">SYSTEMPASSWORD = "oracle"</span><br><span class="line">SYSMANPASSWORD = "oracle"</span><br><span class="line">DBSNMPPASSWORD = "oracle"</span><br><span class="line">DATAFILEDESTINATION =/db/app/oracle/oradata</span><br><span class="line">RECOVERYAREADESTINATION=/db/app/oracle/fast_recovery_area</span><br><span class="line">CHARACTERSET = "AL32UTF8"</span><br><span class="line">TOTALMEMORY = "8192" #设置为内存的50%</span><br></pre></td></tr></table></figure>

<p>执行静默建库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost database]$ dbca -silent -responseFile /db/app/response/dbca.rsp</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200528100906.png" alt=""><br>查看Oracle实例进程</p>
<blockquote>
<p>在最后一步安装的时候安装界面会先清屏，需要按下Enter按钮输入密码（123456），输入2次然后才看见安装进程。</p>
</blockquote>
<blockquote>
<p>若出现<code>Look at the log file &quot;/db/app/oracle/cfgtoollogs/dbca/orcl11g.log&quot; for further details.</code>是因为在/etc/oratab文件中已经指定了<code>$ORACLE_SID</code>（上次删除数据库时，没有彻底清除/etc/oratab）此时只需要将<code>/etc/oratab</code>中的<code>orcl11g:/db/app/oracle/product/11.2.0:N</code>这一行删除或注释即可。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost database]$ ps -ef | grep ora_ | grep -v grep</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200528164747.png" alt=""><br>查看监听状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost database]$ lsnrctl status</span><br><span class="line">    </span><br><span class="line">LSNRCTL for Linux: Version 11.2.0.1.0 - Production on 28-MAY-2020 16:41:11</span><br><span class="line">    </span><br><span class="line">Copyright (c) 1991, 2009, Oracle.  All rights reserved.</span><br><span class="line">    </span><br><span class="line">Connecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=IPC)(KEY=EXTPROC1521)))</span><br><span class="line">STATUS of the LISTENER</span><br><span class="line">------------------------</span><br><span class="line">    Alias                     LISTENER</span><br><span class="line">    Version                   TNSLSNR for Linux: Version 11.2.0.1.0 - Production</span><br><span class="line">Start Date                28-MAY-2020 16:37:29</span><br><span class="line">    Uptime                    0 days 0 hr. 3 min. 41 sec</span><br><span class="line">    Trace Level               off</span><br><span class="line">Security                  ON: Local OS Authentication</span><br><span class="line">    SNMP                      OFF</span><br><span class="line">Listener Parameter File   /db/app/oracle/product/11.2.0/network/admin/listener.ora</span><br><span class="line">    Listener Log File         /db/app/oracle/diag/tnslsnr/localhost/listener/alert/log.xml</span><br><span class="line">Listening Endpoints Summary...</span><br><span class="line">      (DESCRIPTION=(ADDRESS=(PROTOCOL=ipc)(KEY=EXTPROC1521)))</span><br><span class="line">  (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=192.168.192.129)(PORT=1521)))</span><br><span class="line">    Services Summary...</span><br><span class="line">Service "orcl11g.us.oracle.com" has 1 instance(s).</span><br><span class="line">      Instance "orcl11g", status READY, has 1 handler(s) for this service...</span><br><span class="line">Service "orcl11gXDB.us.oracle.com" has 1 instance(s).</span><br><span class="line">      Instance "orcl11g", status READY, has 1 handler(s) for this service...</span><br><span class="line">The command completed successfully</span><br></pre></td></tr></table></figure>

<h3 id="登录sqlplus-查看实例状态"><a href="#登录sqlplus-查看实例状态" class="headerlink" title="登录sqlplus,查看实例状态"></a>登录sqlplus,查看实例状态</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@CentOS ~]$ sqlplus /nolog</span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> conn / as sysdba</span></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> select * from v<span class="variable">$version</span>;</span></span><br><span class="line"></span><br><span class="line">BANNER</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production</span><br><span class="line">PL/SQL Release 11.2.0.1.0 - Production</span><br><span class="line">CORE	11.2.0.1.0	Production</span><br><span class="line">TNS for Linux: Version 11.2.0.1.0 - Production</span><br><span class="line">NLSRTL Version 11.2.0.1.0 - Production</span><br></pre></td></tr></table></figure>

<blockquote>
<p>此处出现错误，请查看错误一揽子</p>
</blockquote>
<h3 id="激活scott用户"><a href="#激活scott用户" class="headerlink" title="激活scott用户"></a>激活scott用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> alter user scott account unlock;</span></span><br><span class="line">User altered.</span><br><span class="line"></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> alter user scott identified by tiger;</span></span><br><span class="line">User altered.</span><br></pre></td></tr></table></figure>

<h3 id="创建用户并授权"><a href="#创建用户并授权" class="headerlink" title="创建用户并授权"></a>创建用户并授权</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> create user asuan identified by <span class="string">"123456"</span>;</span></span><br><span class="line">User created.</span><br><span class="line"></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> grant connect,resource to asuan;</span></span><br><span class="line">Grant succeeded.</span><br></pre></td></tr></table></figure>

<h3 id="开启防火墙"><a href="#开启防火墙" class="headerlink" title="开启防火墙"></a>开启防火墙</h3><h3 id="Navicat远程连接Oracle"><a href="#Navicat远程连接Oracle" class="headerlink" title="Navicat远程连接Oracle"></a>Navicat远程连接Oracle</h3><p>开放1521端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone&#x3D;public --add-port&#x3D;1521&#x2F;tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<p>配置Navicat，如图</p>
<p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200529084750.png" alt=""></p>
<blockquote>
<p>注意</p>
<p>若此处以服务名连接，则许键入<code>tnsnames.ora</code>中的<code>SERVICE_NAME</code></p>
<p>端口默认为1521，但有时会是其他端口，如1522，需与<code>tnsnames.ora</code>一致</p>
<p>若端口是1522端口，需要修改防火墙规则开放1522端口，否则会出现连接超时错误</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ORCL11G =</span><br><span class="line">  (DESCRIPTION =</span><br><span class="line">    (ADDRESS = (PROTOCOL = TCP)(HOST = CentOS)(PORT = 1521))</span><br><span class="line">    (CONNECT_DATA =</span><br><span class="line">      (SERVER = DEDICATED)</span><br><span class="line">      (SERVICE_NAME = orcl11g.us.oracle.com)</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">LISTENER_ORCL11G =</span><br><span class="line">  (ADDRESS = (PROTOCOL = TCP)(HOST = CentOS)(PORT = 1521))</span><br></pre></td></tr></table></figure>

<h3 id="设置Oracle开机自启"><a href="#设置Oracle开机自启" class="headerlink" title="设置Oracle开机自启"></a>设置Oracle开机自启</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@CentOS ~]$ dbstart</span><br></pre></td></tr></table></figure>

<p>执行此命令后会出现错误，错误原因为：：dbstart和dbshut脚本文件中ORACLE_HOME_LISTNER的设置有问题</p>
<p>分别修改<code>dbstart</code>和<code>dbshut</code>脚本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[oracle@CentOS ~]$ vim &#x2F;db&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0&#x2F;bin&#x2F;dbstart </span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">ORACLE_HOME_LISTNER&#x3D;$1</span><br><span class="line">修改为：</span><br><span class="line">ORACLE_HOME_LISTNER&#x3D;$ORACLE_HOME</span><br></pre></td></tr></table></figure>

<p><code>dbshut</code>也进行同样的修改，修改后保存退出，问题解决</p>
<h5 id="Linux启动时自动启动Oracle监听和实例"><a href="#Linux启动时自动启动Oracle监听和实例" class="headerlink" title="Linux启动时自动启动Oracle监听和实例"></a>Linux启动时自动启动Oracle监听和实例</h5><ul>
<li>修改<code>/etc/oratab</code>文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@CentOS ~]# vim &#x2F;etc&#x2F;oratab </span><br><span class="line">---------------------------------------------------------</span><br><span class="line">orcl11g:&#x2F;db&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0:N</span><br><span class="line">修改为:</span><br><span class="line">orcl11g:&#x2F;db&#x2F;app&#x2F;oracle&#x2F;product&#x2F;11.2.0:Y</span><br></pre></td></tr></table></figure>

<ul>
<li>把lsnrctl start和dbstart添加到rc.local文件中</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@CentOS ~]# vim /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>

<p>添加：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su - oracle -lc "/db/app/oracle/product/11.2.0/bin/lsnrctl start"</span><br><span class="line">su - oracle -lc "/db/app/oracle/product/11.2.0/bin/dbstart"</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明:</p>
<p>第一行为开机启动数据库监听服务，第二行为开机启动数据库</p>
</blockquote>
<blockquote>
<p>注意：CentOs7中/etc/rc.d/rc.local不会开机执行，需添加执行权限</p>
</blockquote>
<p>查看<code>rc.local</code>权限:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@CentOS ~]# ll /etc/rc.d/rc.local </span><br><span class="line">-rw-r--r--. 1 root root 600 5月  29 09:13 /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>

<p>可以发现并没有执行权限，现在添加执行权限：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure>

<p>至此，Oracle的开机自启就完成了，执行<code>reboot</code>重启之后查看是否自启动成功：</p>
<p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200529084747.png" alt=""></p>
<p>查看Oracle服务状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@CentOS ~]$ ps -aux | grep oracle</span><br></pre></td></tr></table></figure>
<p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200529084749.png" alt=""></p>
<blockquote>
<p>注：设置Oracle开机自启之后虽然可以监听到实例，但是不能通过Navicat远程连接，需要执行oracle的关闭和开启操作之后才能正常远程连接，原因可能是启动了阻塞实例？</p>
</blockquote>
<h3 id="Linux下Oracle的启动和关闭"><a href="#Linux下Oracle的启动和关闭" class="headerlink" title="Linux下Oracle的启动和关闭"></a>Linux下Oracle的启动和关闭</h3><ul>
<li>启动的时候先启动oracle，然后启动监听器，即：startup-&gt;lsnrctl start</li>
<li>关闭的时候先关闭监听器，然后在关闭oracle,即：lsnrctl stop-&gt;shutdown</li>
</ul>
<h3 id="解决Linux下数据库插入中文乱码问题"><a href="#解决Linux下数据库插入中文乱码问题" class="headerlink" title="解决Linux下数据库插入中文乱码问题"></a>解决Linux下数据库插入中文乱码问题</h3><p>首先以系统DBA权限登录sqlplus</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlplus /nolog</span><br><span class="line">conn /as sysdba</span><br></pre></td></tr></table></figure>

<p>查看数据库编码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select userenv('language') from dual;</span><br></pre></td></tr></table></figure>

<p>结果为：AMERICAN_AMERICA.WE8MSWIN1252 ，这种编码中文会乱码。</p>
<p>修改数据库编码方式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> shutdown immediate;</span></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> startup mount;</span></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> alter system <span class="built_in">enable</span> restricted session;</span></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> alter system <span class="built_in">set</span> job_queue_processes=0;</span></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> alter database open;</span></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> alter database character <span class="built_in">set</span> internal_use AL32UTF8; <span class="comment">#AL32UTF8或者ZHS16GBK都行</span></span></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> shutdown immediate;</span></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> startup</span></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> alter system <span class="built_in">disable</span> restricted session;</span></span><br></pre></td></tr></table></figure>

<p>此时，查看数据库编码:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> select userenv(<span class="string">'language'</span>) from dual;</span></span><br><span class="line"></span><br><span class="line">USERENV('LANGUAGE')</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">AMERICAN_AMERICA.AL32UTF8</span><br></pre></td></tr></table></figure>

<h3 id="错误一揽子"><a href="#错误一揽子" class="headerlink" title="错误一揽子"></a>错误一揽子</h3><h4 id="ORA-01034"><a href="#ORA-01034" class="headerlink" title="ORA-01034"></a>ORA-01034</h4><ul>
<li>错误原因，数据库未启动，查询v$instance报错</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR at line 1:</span><br><span class="line">ORA-01034: ORACLE not available</span><br><span class="line">Process ID: 0</span><br><span class="line">Session ID: 0 Serial number: 0</span><br></pre></td></tr></table></figure>

<p>启动数据库-报错:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> startup mount</span></span><br><span class="line">ORA-01078: failure in processing system parameters</span><br><span class="line">LRM-00109: could not open parameter file '/db/app/oracle/product/11.2.0/dbs/initorcl.ora'</span><br></pre></td></tr></table></figure>

<p>转<code>LRM-00109</code>解决方法</p>
<h4 id="LRM-00109"><a href="#LRM-00109" class="headerlink" title="LRM-00109"></a>LRM-00109</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> startup </span></span><br><span class="line">ORA-01078: failure in processing system parameters</span><br><span class="line">LRM-00109: could not open parameter file '/db/app/oracle/product/11.2.0/dbs/initorcl.ora'</span><br></pre></td></tr></table></figure>

<ul>
<li><p>错误原因：在oracle9i、10g、11g最近几个版本中，数据库默认使用spfile启动数据库，如果spfile不存在，则就会出现上述错误。</p>
</li>
<li><p>解决办法：</p>
<p>查询pfile文件位置，将pfile目录中的init.ora.2182020183512形式的文件copy到$ORACLE_HOME/dbs目录下命名为initorcl.ora即可。具体操作如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@CentOS ~]$ echo $ORACLE_BASE</span><br><span class="line">/db/app/oracle</span><br><span class="line">[oracle@CentOS ~]$ find /db/app/oracle -name pfile</span><br><span class="line">/db/app/oracle/admin/orcl11g/pfile</span><br><span class="line">[oracle@localhost ~]$ cd /db/app/oracle/admin/orcl11g/pfile</span><br><span class="line">[oracle@localhost pfile]$ ls</span><br><span class="line">init.ora.428202010617</span><br><span class="line">[oracle@localhost pfile]$ cp init.ora.428202010617 /db/app/oracle/product/11.2.0/dbs/initorcl.ora</span><br><span class="line">[oracle@localhost pfile]$</span><br></pre></td></tr></table></figure>
<p>此操作之后数据库startup mount出现如下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ORACLE instance started.</span><br><span class="line">      </span><br><span class="line">Total System Global Area 1586708480 bytes</span><br><span class="line">Fixed Size		    2213736 bytes</span><br><span class="line">Variable Size		  922749080 bytes</span><br><span class="line">Database Buffers	  654311424 bytes</span><br><span class="line">Redo Buffers		    7434240 bytes</span><br><span class="line">ORA-00205: error in identifying control file, check alert log for more info</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="ORA-00845"><a href="#ORA-00845" class="headerlink" title="ORA-00845"></a>ORA-00845</h4><p>在oracle 11g中新增的内存自动管理的参数MEMORY_TARGET,它能自动调整SGA和PGA，这个特性需要用到/dev/shm共享文件系统，而且要求/dev/shm必须大于MEMORY_TARGET，如果/dev/shm比MEMORY_TARGET小就会报错</p>
<p><img src="https://cdn.jsdelivr.net/gh/AsuanPic/Pic/pic/20200528153248.png" alt=""> </p>
<ul>
<li>解决方案</li>
</ul>
<p>解决的办法之一是增加tmpfs文件系统的容量:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@CentOS ~]# mount -t tmpfs tmpfs -o size=4g /dev/shm</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参考文章:</p>
<p><a href="https://blog.csdn.net/yjj_xss/article/details/104977384" target="_blank" rel="noopener">https://blog.csdn.net/yjj_xss/article/details/104977384</a></p>
<p><a href="https://blog.csdn.net/russ44/article/details/52137799" target="_blank" rel="noopener">https://blog.csdn.net/russ44/article/details/52137799</a></p>
</blockquote>
<h4 id="ORA-01102"><a href="#ORA-01102" class="headerlink" title="ORA-01102"></a>ORA-01102</h4><p>错误如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> startup mount</span></span><br><span class="line">ORACLE instance started.</span><br><span class="line">    </span><br><span class="line">Total System Global Area 1586708480 bytes</span><br><span class="line">Fixed Size		    2213736 bytes</span><br><span class="line">Variable Size		  922749080 bytes</span><br><span class="line">Database Buffers	  654311424 bytes</span><br><span class="line">Redo Buffers		    7434240 bytes</span><br><span class="line">ORA-01102: cannot mount database in EXCLUSIVE mode</span><br></pre></td></tr></table></figure>

<ul>
<li><p>可能原因：</p>
<pre><code>Oracle被异常关闭时，有资源没有被释放
1） Oracle的共享内存段或信号量没有被释放；
2） Oracle的后台进程（如SMON、PMON、DBWn等）没有被关闭；
3） 用于锁内存的文件lk和sgadef.dbf文件没有被删除。</code></pre><ul>
<li><p>解决思路：<br>如果是HA系统，检查其他节点是否已经启动实例检查Oracle进程是否存在，如果存在则杀掉进程检查信号量是否存在，如果存在，则清除信号量；<br>检查共享内存段是否存在，如果存在，则清除共享内存段；<br>检查锁内存文件lk和sgadef.dbf是否存在，如果存在，则删除.</p>
</li>
<li><p>此处我依靠下面的步骤解决掉了该问题（我遇到的问题是存在锁文件和共享内存段问题）：</p>
</li>
</ul>
</li>
<li><p>如果存在lk和sgadef.dbf文件，则删除</p>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost dbs]$  cd $ORACLE_HOME/dbs</span><br><span class="line">[oracle@localhost dbs]$  ls lk*</span><br><span class="line">lkORCL11G</span><br><span class="line">[oracle@localhost dbs]$  rm lk*</span><br></pre></td></tr></table></figure>

<p> 再次启动时又遇到下面的错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> startup</span></span><br><span class="line">ORACLE instance started.</span><br><span class="line">        </span><br><span class="line">Total System Global Area 1586708480 bytes</span><br><span class="line">Fixed Size		    2213736 bytes</span><br><span class="line">Variable Size		  922749080 bytes</span><br><span class="line">Database Buffers	  654311424 bytes</span><br><span class="line">Redo Buffers		    7434240 bytes</span><br><span class="line">ORA-00205: error in identifying control file, check alert log for more info</span><br></pre></td></tr></table></figure>

<h4 id="ORA-00205"><a href="#ORA-00205" class="headerlink" title="ORA-00205"></a>ORA-00205</h4><blockquote>
<p>此问题比较复杂，最后不知道是哪个方法起效了</p>
</blockquote>
<h5 id="情况1："><a href="#情况1：" class="headerlink" title="情况1："></a>情况1：</h5><p>由于数据库控制文件之一不正确</p>
<ul>
<li>解决方法：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> show parameter control_files</span></span><br><span class="line">NAME                                 TYPE        VALUE</span><br><span class="line">------------------------------------ ----------- ------------------------------</span><br><span class="line">control_files                        string      /u01/app/oracle/oradata/RTS/co</span><br><span class="line">                                                  ntrol01.ctl, /u01/app/oracle/o</span><br><span class="line">                                                  radata/RTS/control02.ctl</span><br></pre></td></tr></table></figure>

<p>可以看到存在两个控制文件，判断哪个控制文件不可用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">[oracle@PR]$</span><span class="bash"> ll /u01/app/oracle/oradata/RTS/control01.ctl</span></span><br><span class="line">-rw-r-----. 1 oracle oinstall 9748480 Jun 24 03:37 /u01/app/oracle/oradata/RTS/control01.ctl</span><br><span class="line"><span class="meta">[oracle@PR]$</span><span class="bash"> ll /u01/app/oracle/oradata/RTS/control02.ctl</span></span><br><span class="line">ls: cannot access /u01/app/oracle/oradata/RTS/control02.ctl: No such file or directory</span><br></pre></td></tr></table></figure>
<p>可以看到，control02.ctl是不可用的，进行修改</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> alter system <span class="built_in">set</span> control_files=<span class="string">'/u01/app/oracle/oradata/RTS/control01.ctl'</span> scope=spfile;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，此时可能会出现 <code>ORA-32001</code>错误</p>
</blockquote>
<p>关闭，并重启oracle</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> shut immediate;</span></span><br><span class="line">ORA-01507: database not mounted</span><br><span class="line">ORACLE instance shut down.</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> startup</span></span><br><span class="line">ORACLE instance started.</span><br><span class="line">ORA-00205......</span><br></pre></td></tr></table></figure>

<blockquote>
<p>该方法对我这种情况好像并没有什么卵用–</p>
</blockquote>
<h5 id="情况2"><a href="#情况2" class="headerlink" title="情况2:"></a>情况2:</h5><p>打开日志文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost orcl]$ cd /db/app/oracle/diag/rdbms/orcl11g/orcl/trace</span><br><span class="line">[oracle@localhost trace]$ vim alert_orcl.log</span><br></pre></td></tr></table></figure>

<p>可以看到如下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ALTER DATABASE   MOUNT</span><br><span class="line">ORA-00210: cannot open the specified control file</span><br><span class="line">ORA-00202: control file: '/db/app/oracle/oradata/orcl11g/control01.ctl'</span><br><span class="line">ORA-27086: unable to lock file - already in use</span><br><span class="line">Linux-x86_64 Error: 11: Resource temporarily unavailable</span><br><span class="line">Additional information: 8</span><br><span class="line">Additional information: 13879</span><br><span class="line">ORA-205 signalled during: ALTER DATABASE   MOUNT...</span><br></pre></td></tr></table></figure>

<ul>
<li><p>解决思路</p>
<p>查看<code>$ORACLE_HOME/dbs</code>文件夹下是否存在<code>lk*</code>和<code>sgadef.dbf</code>文件，如果存在，删除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost dbs]$ ps -ef | grep ora_ | grep -v grep</span><br></pre></td></tr></table></figure>

</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">oracle    13857      1  0 16:40 ?        00:00:02 ora_pmon_orcl11g</span><br><span class="line">oracle    13859      1  0 16:40 ?        00:00:25 ora_vktm_orcl11g</span><br><span class="line">oracle    13863      1  0 16:40 ?        00:00:00 ora_gen0_orcl11g</span><br><span class="line">oracle    13865      1  0 16:40 ?        00:00:00 ora_diag_orcl11g</span><br><span class="line">oracle    13867      1  0 16:40 ?        00:00:00 ora_dbrm_orcl11g</span><br><span class="line">oracle    13869      1  0 16:40 ?        00:00:01 ora_psp0_orcl11g</span><br><span class="line">oracle    13871      1  0 16:40 ?        00:00:02 ora_dia0_orcl11g</span><br><span class="line">oracle    13873      1  0 16:40 ?        00:00:00 ora_mman_orcl11g</span><br><span class="line">oracle    13875      1  0 16:40 ?        00:00:00 ora_dbw0_orcl11g</span><br><span class="line">oracle    13877      1  0 16:40 ?        00:00:00 ora_lgwr_orcl11g</span><br><span class="line">oracle    13879      1  0 16:40 ?        00:00:02 ora_ckpt_orcl11g</span><br><span class="line">oracle    13881      1  0 16:40 ?        00:00:00 ora_smon_orcl11g</span><br><span class="line">oracle    13883      1  0 16:40 ?        00:00:00 ora_reco_orcl11g</span><br><span class="line">oracle    13885      1  0 16:40 ?        00:00:01 ora_mmon_orcl11g</span><br><span class="line">oracle    13887      1  0 16:40 ?        00:00:02 ora_mmnl_orcl11g</span><br><span class="line">oracle    13889      1  0 16:40 ?        00:00:00 ora_d000_orcl11g</span><br><span class="line">oracle    13891      1  0 16:40 ?        00:00:00 ora_s000_orcl11g</span><br><span class="line">oracle    13930      1  0 16:40 ?        00:00:00 ora_qmnc_orcl11g</span><br><span class="line">oracle    13945      1  0 16:40 ?        00:00:01 ora_cjq0_orcl11g</span><br><span class="line">oracle    13959      1  0 16:40 ?        00:00:00 ora_q000_orcl11g</span><br><span class="line">oracle    13961      1  0 16:40 ?        00:00:00 ora_q001_orcl11g</span><br><span class="line">oracle    14005      1  0 16:50 ?        00:00:01 ora_smco_orcl11g</span><br><span class="line">oracle    29258      1  0 18:59 ?        00:00:00 ora_pmon_orcl</span><br><span class="line">oracle    29260      1  0 18:59 ?        00:00:01 ora_vktm_orcl</span><br><span class="line">oracle    29264      1  0 18:59 ?        00:00:00 ora_gen0_orcl</span><br><span class="line">oracle    29266      1  0 18:59 ?        00:00:00 ora_diag_orcl</span><br><span class="line">oracle    29268      1  0 18:59 ?        00:00:00 ora_dbrm_orcl</span><br><span class="line">oracle    29270      1  0 18:59 ?        00:00:00 ora_psp0_orcl</span><br><span class="line">oracle    29272      1  0 18:59 ?        00:00:00 ora_dia0_orcl</span><br><span class="line">oracle    29274      1  0 18:59 ?        00:00:00 ora_mman_orcl</span><br><span class="line">oracle    29276      1  0 18:59 ?        00:00:00 ora_dbw0_orcl</span><br><span class="line">oracle    29278      1  0 18:59 ?        00:00:00 ora_lgwr_orcl</span><br><span class="line">oracle    29280      1  0 18:59 ?        00:00:00 ora_ckpt_orcl</span><br><span class="line">oracle    29282      1  0 18:59 ?        00:00:00 ora_smon_orcl</span><br><span class="line">oracle    29284      1  0 18:59 ?        00:00:00 ora_reco_orcl</span><br><span class="line">oracle    29286      1  0 18:59 ?        00:00:00 ora_mmon_orcl</span><br><span class="line">oracle    29288      1  0 18:59 ?        00:00:00 ora_mmnl_orcl</span><br><span class="line">oracle    29290      1  0 18:59 ?        00:00:00 ora_d000_orcl</span><br><span class="line">oracle    29292      1  0 18:59 ?        00:00:00 ora_s000_orcl</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost dbs]$ kill -9 13857  </span><br><span class="line">[oracle@localhost dbs]$ kill -9 29258</span><br><span class="line">[oracle@localhost dbs]$ ipcs -m</span><br><span class="line">      </span><br><span class="line">------ Shared Memory Segments --------</span><br><span class="line">key        shmid      owner      perms      bytes      nattch     status      </span><br><span class="line">0x087c7b68 7          oracle     660        4096       0     </span><br><span class="line">      </span><br><span class="line">[oracle@localhost dbs]$ ipcs -map</span><br><span class="line">------ Message Queues PIDs --------</span><br><span class="line">msqid      owner      lspid      lrpid     </span><br><span class="line">      </span><br><span class="line">------ Shared Memory Creator/Last-op PIDs --------</span><br><span class="line">shmid      owner      cpid       lpid      </span><br><span class="line">7          oracle     13829      13863</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@localhost dbs]$ ipcrm -m 7</span><br><span class="line"> [oracle@localhost dbs]$ ipcs -s</span><br><span class="line">      </span><br><span class="line">------ Semaphore Arrays --------</span><br><span class="line">key        semid      owner      perms      nsems     </span><br><span class="line">      </span><br><span class="line">[oracle@localhost dbs]$ ipcs -m</span><br><span class="line">      </span><br><span class="line">------ Shared Memory Segments --------</span><br><span class="line">key        shmid      owner      perms      bytes      nattch     status</span><br></pre></td></tr></table></figure>

<p>此时启动Oracle</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> startup mount </span></span><br><span class="line">ORACLE instance started.</span><br><span class="line">      </span><br><span class="line">Total System Global Area 1586708480 bytes</span><br><span class="line">Fixed Size		    2213736 bytes</span><br><span class="line">Variable Size		  922749080 bytes</span><br><span class="line">Database Buffers	  654311424 bytes</span><br><span class="line">Redo Buffers		    7434240 bytes</span><br><span class="line">Database mounted.</span><br></pre></td></tr></table></figure>

<blockquote>
<p>本部分参考文章:</p>
<p><a href="https://blog.csdn.net/yjj_xss/article/details/104977384" target="_blank" rel="noopener">https://blog.csdn.net/yjj_xss/article/details/104977384</a></p>
<p><a href="https://www.cnblogs.com/suifu/p/5823099.html" target="_blank" rel="noopener">https://www.cnblogs.com/suifu/p/5823099.html</a></p>
<p><a href="https://dbatricksworld.com/ora-00205-error-in-identifying-control-file-check-alert-log-for-more-info" target="_blank" rel="noopener">https://dbatricksworld.com/ora-00205-error-in-identifying-control-file-check-alert-log-for-more-info</a></p>
</blockquote>
<h4 id="ORA-32001"><a href="#ORA-32001" class="headerlink" title="ORA-32001"></a>ORA-32001</h4><p>在执行命令时可能出现<code>ORA-32001: write to SPFILE requested but no SPFILE is in use</code></p>
<p>解决：</p>
<ol>
<li><p>查看是否有<code>spfile</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash">show parameter spfile;</span></span><br><span class="line"></span><br><span class="line">NAME            TYPE              VALUE            </span><br><span class="line">------------------------------------ -----</span><br><span class="line">spfile          string</span><br></pre></td></tr></table></figure>
</li>
<li><p>从pfile创建spfile</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash">create spfile from pfile;</span></span><br><span class="line">File created.</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭并重启数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash">shutdown immediate;</span></span><br><span class="line"><span class="meta">SQL&gt;</span><span class="bash">startup mount</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看是否有<code>spfile</code>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash">show parameter spfile;</span></span><br><span class="line"></span><br><span class="line">NAME                TYPE            VALUE</span><br><span class="line">------------------------------------ ----------------------</span><br><span class="line">spfile              string         db/app/oracle/product/11.2.0/dbs/spfilePROD.ora</span><br></pre></td></tr></table></figure>
</li>
<li><p>再次执行需要执行的命令，发现该错误已解决。</p>
</li>
</ol>
<h4 id="ORA-01109"><a href="#ORA-01109" class="headerlink" title="ORA-01109"></a>ORA-01109</h4><p>在数据库未打开时对数据库进行操作会收到<code>ORA-01109</code>错误</p>
<p>使用如下命令打开数据库即可:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">alter database open;</span><br></pre></td></tr></table></figure>

<h4 id="The-listener-supports-no-services"><a href="#The-listener-supports-no-services" class="headerlink" title="The listener supports no services"></a>The listener supports no services</h4><p>使用<code>lsnrctl status</code>命令时可能会出现<code>The listener supports no services</code></p>
<p>问题原因：数据库实例没有注册到<code>listner</code></p>
<ul>
<li><p>解决方法一：</p>
<p>登录数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@CentOS ~]$ sqlplus /nolog</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash"> conn / as sysdba</span></span><br></pre></td></tr></table></figure>

<p>强制注册服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">SQL&gt;</span><span class="bash">alter system register;</span></span><br></pre></td></tr></table></figure>

<p>查看监听状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[oracle@CentOS ~]$ lsnrctl status</span><br></pre></td></tr></table></figure>
</li>
<li><p>解决方法二：</p>
<p>在<code>listener.ora</code>中添加如下代码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SID_LIST_LISTENER =  </span><br><span class="line">(SID_LIST =  </span><br><span class="line">  (SID_DESC =  </span><br><span class="line">  (GLOBAL_DBNAME = orcl)</span><br><span class="line">  (SID_NAME = orcl)</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注1：里面的orcl根据安装的数据库实例名确定</p>
</blockquote>
<blockquote>
<p>注2：此方法我并没有使用，不确定是否有效</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>环境搭建</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面试笔记整理</title>
    <url>/2021/09/07/Java%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h3 id="Java面试笔记"><a href="#Java面试笔记" class="headerlink" title="Java面试笔记"></a>Java面试笔记</h3><blockquote>
<p>来个公司收了我吧</p>
</blockquote>
<a id="more"></a>

<h3 id="面向对象与面向过程的区别"><a href="#面向对象与面向过程的区别" class="headerlink" title="面向对象与面向过程的区别"></a>面向对象与面向过程的区别</h3><p>面向过程是让计算机有步骤地顺序做一件事，是过程化思维，在开发大型项目时，软件复用和维护困难，<strong>模块之间耦合严重。</strong>面向对象可以拆解问题的复杂度，<strong>对现实事物进行抽象并映射为开发对象</strong>，更接近人的思维。</p>
<p>面向过程代码松散，强调流程化解决问题，面向对象代码强调高内聚、低耦合，先抽象模型定义共性行为，再解决实际问题。</p>
<h4 id="C-和Java"><a href="#C-和Java" class="headerlink" title="C++和Java"></a>C++和Java</h4><ol>
<li>C++可以继承多个类，Java只能单继承，但是可以实现多个接口</li>
<li>Java和C++都是强类型语言，都存在类的概念，并且都有private，protected，public等访问限定符。</li>
</ol>
<h3 id="面向对象的特点"><a href="#面向对象的特点" class="headerlink" title="面向对象的特点"></a>面向对象的特点</h3><p>封装，继承，多态</p>
<p><strong>封装：</strong>就是把对象的属性和操作封装为一个独立的整体，并尽可能隐藏对象的内部实现细节，并且可以只让可信的类或对象访问自身的数据和方法。</p>
<p><strong>继承：</strong>子类继承父类的特征和行为，使得子类具有父类相同的行为，如果父类中拥有被private修饰属性，则子类不能继承。Java只支持单继承，即一个子类只允许有一个父类，但可以实现多级继承。通过继承，提高了代码的复用性。</p>
<p>继承的实现方法有实现继承和接口继承，实现继承指直接使用基类的方法和属性，接口继承时子类需要实现父类的方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;继承链中的优先级调用</span><br><span class="line">this.show(O);super.show(O);this.show((super)O);super.show((super)O)</span><br><span class="line">&#x2F;&#x2F;如果(super)O重写了this的方法，则会覆盖。</span><br></pre></td></tr></table></figure>

<p><strong>多态：</strong>一个类实例的相同方法，在不同情形下有不同的表现形式，只有在运行时才知道引用变量指向的具体对象。多态消除了类型之间的耦合关系，实现低耦合。</p>
<p>在Java中可以<strong>通过继承和接口两种方式实现多态</strong>。多态的<strong>实现需要进行继承、重写、向上转型</strong>，在多态中必须存在继承关系的子类和父类，子类需要对父类中的某些方法进行重写，向上转型即在多态中父类的引用指向子类，如</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; a =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure>

<p>注意：向上转型之后，子类的特有方法就不能再被调用了。</p>
<h3 id="Java中子类的初始化顺序"><a href="#Java中子类的初始化顺序" class="headerlink" title="Java中子类的初始化顺序"></a>Java中子类的初始化顺序</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">父类的静态变量和代码块</span><br><span class="line">子类的静态变量和代码块</span><br><span class="line">父类的实例变量，普通语句块</span><br><span class="line">父类的构造函数</span><br><span class="line">子类的实例变量，普通语句块</span><br><span class="line">子类的构造函数</span><br></pre></td></tr></table></figure>

<h3 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h3><ol>
<li><p>一个类可以实现多个接口，但是只能继承一个类</p>
</li>
<li><p>接口的成员只能是public(JDK8中允许default修饰定义默认方法)，抽象类无所谓。</p>
</li>
<li><p>接口中的字段只能是static final类型，抽象类无所谓</p>
</li>
<li><p>接口用于让不相关的类实现同一方法和需要多重继承的时候，</p>
<p>例如：Plane和Bird类都有fly(),应该把fly定义为接口，因为除了fly外，bird和plane基本没有其他相同特征。</p>
</li>
</ol>
<h3 id="重写和重载"><a href="#重写和重载" class="headerlink" title="重写和重载"></a>重写和重载</h3><p><strong>重写(override): **是子类对父类</strong>允许访问的方法**的实现过程进行重新编写，其返回值和形参都不能改变</p>
<p>重写规则：1. 被final修饰的方法不能被重写； 2. 构造方法不能被重写；3. 访问权限不能比父类中被重写的方法访问权限更低;<code>public&gt;protected&gt;(default)&gt;private</code></p>
<p><strong>重载(overload):</strong>在一个类中，方法名相同，而参数不同称为方法的重载。</p>
<p>重载的规则：1. 被重载的方法可以改变返回类型；2. 被重载的方法可以改变访问修饰符；<strong>3.被重载的方法必须改变参数列表。</strong></p>
<p>JVM在重载方法中选择合适方法的顺序为：1. 精确匹配；2. 基本数据类型转为更大的表示范围；3. 自动拆箱装箱；4. 子类向上转型；5. 可变参数</p>
<h3 id="自动装箱与拆箱"><a href="#自动装箱与拆箱" class="headerlink" title="自动装箱与拆箱"></a>自动装箱与拆箱</h3><p>在Java中，每个数据类型都有一个对应的包装类(char的包装类为Character)</p>
<p>自动装箱，指将基本数据类型包装为一个包装类类型，如向泛型为<code>Inetger</code>的类型添加int元素</p>
<p>自动拆箱，即将一个包装类的对象转换为一个基本数据类型</p>
<p>注意：比较两个包装类数值时需要使用<code>equal</code>s而不是<code>==</code>；</p>
<h3 id="Java如何实现平台无关性"><a href="#Java如何实现平台无关性" class="headerlink" title="Java如何实现平台无关性"></a>Java如何实现平台无关性</h3><p>java可以一次编写，到处运行，Java编译器可生成与计算机体系结构无关的字节码指令，字节码文件不仅可以轻易的在任何机器上执行，还可以动态的转换为本地机器代码，转换由JVM实现，屏蔽了不同操作系统之间的差异。</p>
<h3 id="Java中Class类的作用"><a href="#Java中Class类的作用" class="headerlink" title="Java中Class类的作用"></a>Java中Class类的作用</h3><p>在java运行时，系统会为所有对象维护一个运行时类型标识，这个信息会跟踪每个对象所属的类，虚拟机利用运行时类信息选择要执行的正确方法，保存这些信息的类就是Class，这是一个泛型类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类名<span class="class">.<span class="keyword">class</span>；对象的<span class="title">getclass</span>方法；<span class="title">Class</span>.<span class="title">forName</span>(类的全限定名)</span></span><br></pre></td></tr></table></figure>

<h3 id="fail-fast和fail-safe"><a href="#fail-fast和fail-safe" class="headerlink" title="fail-fast和fail-safe"></a>fail-fast和fail-safe</h3><p><strong>fail-fast(快速失败机制)：</strong>是java集合的一种错误检测机制，当<strong>多个线程对部分集合进行结构上的改变操作</strong>时可能会发生fail-fast，抛出ConcurrentModificationException异常。如当在迭代集合的过程中，集合在结构上发生了改变。</p>
<p>:warning:fail-fast不能保证不同步的情况下一定会抛出异常，只能尽力去抛出异常</p>
<p><strong>fail-safe(安全失败)：</strong>采用fail-safe的集合容器，在遍历是不是直接在集合内容上访问，而是先复制原有集合的内容，然后在拷贝的集合上进行遍历操作，由于是对拷贝的集合遍历，<strong>对原集合的修改并不会被迭代器检测到</strong>抛出异常。缺点是迭代器也不能访问到修改后的内容。(java.util.concurrent)</p>
<h3 id="浅拷贝与深拷贝"><a href="#浅拷贝与深拷贝" class="headerlink" title="浅拷贝与深拷贝"></a>浅拷贝与深拷贝</h3><p>Object类中的<strong>Clone()</strong>方法用于拷贝对象，默认Clone()方法是浅拷贝。</p>
<p><strong>浅拷贝：</strong>只复制当前对象的基本数据类型和引用变量，没有复制引用对象指向的实际对象，对克隆对象的修改可能影响原对象，不安全。</p>
<blockquote>
<p>对于引用类型，比如数组或者类对象，因为引用类型是引用传递，所以浅拷贝只是把内存地址赋值给了成员变量，它们指向了同一内存空间。改变其中一个，会对另外一个也产生影响。</p>
</blockquote>
<p><strong>深拷贝：</strong>完全拷贝基本数据类型和引用类型，安全，但是较浅拷贝速度慢且开销大</p>
<blockquote>
<p>深拷贝，在拷贝引用类型成员变量时，为引用类型的数据成员另辟了一个独立的内存空间，实现真正内容上的拷贝。</p>
</blockquote>
<p>对于有多层对象的，每个对象都需要实现Cloneable,并重写clone()方法，进而实现对象的串行层层拷贝。</p>
<p><strong>实现对象拷贝的类，需要实现Cloneable接口，并覆写clone()方法</strong>。</p>
<h3 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h3><p>数组可以随机访问其中元素，查询快，增删慢(需要移动后面所有元素)；链表删除快，查询需要遍历整个链表。</p>
<p>数组需要连续的内存空间，而链表的空间可以不连续。</p>
<p>数组的扩容需要分配一块更大的空间再迁移数据，而链表可以动态扩容。</p>
<h3 id="ArrayList和LinkedList"><a href="#ArrayList和LinkedList" class="headerlink" title="ArrayList和LinkedList"></a>ArrayList和LinkedList</h3><p>ArrayList基于数组实现，LinkedList基于双向链表设计，两者都可以非空，重复，有序，且线程不安全。</p>
<p>LinkedList因为基于双向链表，所以获取元素较ArrayList要慢 (遍历整个链表O(N))</p>
<p>LinkedList做插入删除操作的时候慢在寻址，快在操作只需要更改前后Node的引用地址</p>
<p>ArrayList快在寻址，慢在数组元素的批量copy</p>
<blockquote>
<p>当要插入和删除的元素在前半段或者非常靠前的位置的时候，LinkedList的效率大大快过ArrayList，但是越往后ArrayList要Copy的元素越来越少，操作速度必然追上或者超过LinkedList</p>
</blockquote>
<blockquote>
<p>LinkedList在查找元素的时候，若index小于size的一半从头开始遍历链表，当index在链表的后半部时，从尾部遍历链表</p>
</blockquote>
<p>ArrayList中的所有方法都是不同步的，所以在并发下 <strong>必然出现线程安全问题</strong>，vector是ArrayList的线程安全版本，其默认2倍扩容。</p>
<p>ArrayList调用grow方法判断是否需要多次扩容，每次默认扩容为原容器容量右移一位，即相当于原容器的1.5倍。</p>
<h3 id="List和Set"><a href="#List和Set" class="headerlink" title="List和Set"></a>List和Set</h3><p><img src="https://img.php.cn/upload/article/000/000/028/5c73a16ef1c04585.jpg" alt="img"></p>
<p>List和Set都是继承的Collection接口</p>
<p><strong>List：</strong>有序，可重复；<strong>Set：</strong>无序，不可重复，重复元素会被覆盖掉</p>
<p>List可以通过迭代器和下标遍历，Set只能通过迭代器遍历</p>
<p>HashSet通过 HashMap实现，HashMap的Key即HashSet的值，可以存在null值，线程不安全</p>
<p>TreeSet通过TreeMap实现</p>
<p>ArrayList和LinkedList见上述。</p>
<h4 id="HashSet如何实现添加元素时保证元素不重复"><a href="#HashSet如何实现添加元素时保证元素不重复" class="headerlink" title="HashSet如何实现添加元素时保证元素不重复"></a>HashSet如何实现添加元素时保证元素不重复</h4><p>如果不存在元素和传入对象的Hash值相等，表示该对象不存在，存。</p>
<p>如果存在元素和传入对象的Hash值相等，若equals判读相等，不存，若equals判断不等，存</p>
<h4 id="关于HashMap"><a href="#关于HashMap" class="headerlink" title="关于HashMap"></a>关于HashMap</h4><p>HashMap在底层数据结构上采用了数组+链表+红黑树的结构，通过散列映射来存储键值对数据，因为在查询上使用散列码，所以查询上速度比较快。HashMap最多允许一对键值对的key为null，多个键值对的value为null。无序，且非线程安全。(ConcurrentHashMap线程安全)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; 默认的table 初始容量（<span class="number">16</span>）</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>：默认的负载因子</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>: 链表长度大于该参数转红黑树</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNTREEIFY_THRESHOLD = <span class="number">6</span>: 当树的节点数小于等于该参数转成链表</span><br></pre></td></tr></table></figure>

<p><strong>HashMap的动态扩容：</strong>假设hashmap的table长度是m，键值对为n，table中每个链表长度为n/m,为了使查找成本尽可能小需要m尽可能大，可以使用resize实现，hashMap默认负载因子0.75f，即当容量达到3/4时进行扩容，负载因子越大，能容纳的键值对越多，但是查找的代价也会相应增大。</p>
<p><strong>hash():</strong>如果key为null，返回0，否则将hashcode方法的返回值高低16位异或（ h ^ (h &gt;&gt;&gt; 16) ）,<strong>让尽可能多的位参与运算，使结果的0,1分布更加均匀,降低Hash冲突概率</strong> （右位移16位正好是32bit的一半，高半区和低半区异或加大低位的随机性，而且混合后的低位参杂了高位的部分特征，变相保留了高位的信息）</p>
<p><strong>Hash冲突：</strong>hash冲突指hash方法出来key的hash值是相同的</p>
<h5 id="Hash冲突的解决办法："><a href="#Hash冲突的解决办法：" class="headerlink" title="Hash冲突的解决办法："></a>Hash冲突的解决办法：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">开放地址</span><br><span class="line">建立公共溢出区</span><br><span class="line">再哈希：发生Hash冲突的时候再进行一次Hash，缺点是每次冲突都要再Hash，时间成本增加</span><br><span class="line">拉链法：将Hash冲突的同义词存储在同一个线性链表中 缺点是需要额外的空间</span><br></pre></td></tr></table></figure>

<h5 id="为什么HsahMap的数组长度要取2的整数幂"><a href="#为什么HsahMap的数组长度要取2的整数幂" class="headerlink" title="为什么HsahMap的数组长度要取2的整数幂"></a>为什么HsahMap的数组长度要取2的整数幂</h5><ol>
<li>扩容，大小指定为2的幂次，当哈希桶扩大为2倍时只需要进行左移操作，位操作的速度比较快</li>
<li>减少Hash冲突：2的幂次Length-1值后面的二进制位全为1，这种情况下，index=key值的Hashcode&amp;(Length-1),index结果等同与hashcode后几位的值，只要Hashcode本身分布均匀，Hash算法的结果就是均匀的。</li>
</ol>
<h3 id="二叉查找树，AVL树，B树，红黑树"><a href="#二叉查找树，AVL树，B树，红黑树" class="headerlink" title="二叉查找树，AVL树，B树，红黑树"></a>二叉查找树，AVL树，B树，红黑树</h3><p><strong>二叉查找树(BST)：</strong>左节点小于根节点，右节点大于根节点(O(logN)),在极端情况下会变成线性链表结构O(N)，为解决这个出现了AVL树</p>
<p><strong>平衡二叉树(AVL)：</strong>是一种自平衡的树，除了二叉树的特征外，规定左子树和右子树高度差不超过1（保证不会成为线性链表），但是由于要维持自身平衡，所以插入删除节点的时候需要对节点进行频繁旋转。</p>
<p><strong>B树(也叫B-树)：</strong>是一种多路平衡数，其所有的叶子节点处于同一层，每个节点中的元素从小到大排序，可以看成矮胖版的AVL树，相对减少磁盘IO(Mongodb索引就是通过B树实现)</p>
<p><strong>红黑树：</strong>一种自平衡的二叉查找树</p>
<img src="https://images0.cnblogs.com/i/497634/201403/251730074203156.jpg" alt="img" style="zoom:80%;" />

<ol>
<li>每个节点或是黑色或是红色</li>
<li>根节点是黑色</li>
<li>每个叶子节点为黑色(叶子节点指为空的叶子节点)</li>
<li>如果一个节点为红色，则子节点必须是黑色</li>
<li>从一个节点到该节点的子孙节点所有路径上包含相同数目的黑节点</li>
</ol>
<blockquote>
<p>红黑树相较于AVL树牺牲了严格的高度平衡的条件，只要求部分达到平衡要求，由于红黑树的设计，任何不平衡都会在3次旋转内解决，相较于BST，红黑树可以确保树的最长路径不大于两倍最短路径的长度，即查找效果室友最低保证的，即O(logN)</p>
</blockquote>
<p><strong>红黑树旋转(左旋右旋)：</strong></p>
<p>对x进行左旋，意味着，将“x的右孩子”设为“x的父亲节点”；即，将 x变成了一个左节点(x成了为z的左孩子)！。 因此，<strong>左旋中的“左”，意味着“被旋转的节点将变成一个左节点”</strong>。</p>
<img src="https://images0.cnblogs.com/i/497634/201403/251734577643655.jpg" alt="img"  />

<p><strong>红黑树插入：</strong></p>
<p>将红黑树当作一颗二叉查找树，插入节点</p>
<p>将节点着色为红色（将插入的节点着色为红色，不会违背”特性(5)”！少违背一条特性，就意味着我们需要处理的情况越少。）</p>
<p>通过旋转着色生成新的红黑树</p>
<h3 id="String、StringBuilder、StringBuffer"><a href="#String、StringBuilder、StringBuffer" class="headerlink" title="String、StringBuilder、StringBuffer"></a>String、StringBuilder、StringBuffer</h3><ol>
<li><strong>可变性：</strong>只有String不可变</li>
</ol>
<blockquote>
<p>因为String被声明为final，所以不可以被继承，<strong>对于String对象的任何修改，其实都是在创建一个新的String对象再引用该对象，只是修改了变量引用的对象，没有修改原本String对象本身</strong>。</p>
<p>因为String的不可变：可以用做HashMap的Key，并且线程安全</p>
</blockquote>
<ol start="2">
<li><strong>安全性：</strong>只有StringBuilder线程不安全</li>
</ol>
<blockquote>
<p>因为StringBuilder在append操作时并未使用线程同步，而StringBuffer几乎大部分方法都使用了synchronized关键字进行方法级别的同步处理。</p>
</blockquote>
<p><strong>字符串的拼接</strong></p>
<ol>
<li><p>直接使用+的话，底层使用StringBuilder实现，在循环中若使用+拼接，相当于不断创建新的StringBuilder对象再转换为String对象，效率差。</p>
</li>
<li><p>使用String的concat方法，效率稍高与直接使用+</p>
</li>
<li><p>使用StringBuilder和StringBuffer的append方法，StringBuilder效率高，但是线程不安全；StrinBuffer使用synchronized保证线程安全，但是效率低一些</p>
</li>
</ol>
<blockquote>
<p>常量和常量拼接，结果仍然是常量，结果在常量池；只要有变量参与结果就是变量，存在堆中。</p>
</blockquote>
<h3 id="finally，finalize，final"><a href="#finally，finalize，final" class="headerlink" title="finally，finalize，final"></a>finally，finalize，final</h3><p><strong>finalize()：</strong> 在垃圾回收器(GC)准备释放对象占用的内存时，首先调用finalize(),并且在下一次垃圾回收动作发生，才会真正回收该对象占用的内存，一个对象的finalize()方法只会调用一次，而且finalize()被调用不意味着gc会回收该对象。</p>
<p><strong>finally：</strong>作为异常处理的一部分，只能用在try-catch语句中，finally的语句不论是否抛出异常都一定会被执行</p>
<blockquote>
<p>try语句执行之前的抛出异常或返回时finally不会被执行</p>
<p>try语句中System.exit（0）终止虚拟局运行时不会执行finally</p>
<p>try或者catch语句执行时被打断(如断电死机)，finally语句不会被执行</p>
<p>try-catch中有return时会先执行finally，若finally也有return则返回finally的return</p>
</blockquote>
<h3 id="final，Static，Static-final"><a href="#final，Static，Static-final" class="headerlink" title="final，Static，Static final"></a>final，Static，Static final</h3><p><strong>final：</strong></p>
<ol>
<li>final类不能被继承，类中的所有方法默认是final的</li>
<li>final方法可以被继承，但不能被子类覆盖</li>
<li>final成员变量只能赋值一次，赋值之后不能再改变</li>
<li>final不能修饰构造方法</li>
<li>private类型的方法默认是final类型的</li>
<li>final可以先声明，不给初始值，但是final在使用之前必须被初始化。</li>
</ol>
<p><strong>static final/final static：</strong></p>
<p>用来修饰成员变量和成员方法，可以理解为全局变量(final static和static final没有任何区别)</p>
<ol>
<li><p>对于变量，表示一旦赋值就不可修改，可以通过类名访问</p>
</li>
<li><p>对于方法，表示不可覆盖，可以通过类名直接访问</p>
</li>
</ol>
<p><strong>Static: ** 被Static修饰的成员变量和成员方法 **独立于该类的任何对象</strong>，即不依赖类的特定实例，只要这个类被加载，虚拟机就能根据类名在 <strong>运行时数据区的方法区找到</strong>，因此Static对象可以在它的任何对象创建之前访问。<strong>Public</strong>修饰的<strong>Static</strong>成员变量和成员方法本质是全局变量和全局方法。</p>
<h4 id="Static可以被继承嘛"><a href="#Static可以被继承嘛" class="headerlink" title="Static可以被继承嘛"></a>Static可以被继承嘛</h4><p>static修饰可以被继承，<strong>但不能被重写</strong>，静态方法在编译时绑定，方法重写是运行时绑定</p>
<h4 id="是否可以从一个static方法内部访问该类的非static方法"><a href="#是否可以从一个static方法内部访问该类的非static方法" class="headerlink" title="是否可以从一个static方法内部访问该类的非static方法"></a>是否可以从一个static方法内部访问该类的非static方法</h4><p><strong>不可以，</strong>因为非Static方法需要和对象关联在一起，必须创建一个对象才可以在该对象上进行方法的调用，在static方法被调用时，可能还没有创建任何实例对象。</p>
<h4 id="静态变量和实例变量的区别"><a href="#静态变量和实例变量的区别" class="headerlink" title="静态变量和实例变量的区别"></a>静态变量和实例变量的区别</h4><p>静态变量需要static修饰</p>
<p>实例对象属于 <strong>某个对象的属性</strong>，必须创建实例对象才会被分配空间使用这个实例变量。</p>
<p>静态变量属于类，又叫类变量，<strong>程序加载类的字节码文件时静态变量就会被分配空间被使用</strong></p>
<h3 id="Java的运行时数据区"><a href="#Java的运行时数据区" class="headerlink" title="Java的运行时数据区"></a>Java的运行时数据区</h3><ol>
<li>程序计数器：一块较小的内存空间，可以看作当前线程所执行字节码的行号指示器，是唯一虚拟机没有规定内存溢出情况的区域。</li>
<li>JVM栈：为虚拟机执行Java服务，每当有一个新线程创建时就会分配一个栈空间，线程结束后栈空间被回收，栈空间与线程拥有相同的生命周期。当线程请求的栈深度大于虚拟机允许的深度时抛出StackOverflowError，如果jvm栈容量可以动态扩展，栈扩展无法申请到足够内存时抛出：OutOfMemoryError</li>
<li>本地方法栈：与Jvm栈类似，调用本地方法时JVM栈保持不变，动态链接并直接调用本地方法。</li>
<li>堆：JVM管理内存中最大的一块，<strong>被所有线程共享，在虚拟机启动时创建。</strong>Java中几乎所有的实例都在堆分配内存。堆在物理上可以处于不连续的空间，逻辑上应该连续。</li>
<li>方法区：用于存储被虚拟机加载的常量、静态变量、类型信息、即时编译器编译后的代码缓存等数据，可以固定大小，也可以扩展，<strong>还可以不实现垃圾回收。</strong></li>
</ol>
<h4 id="运行时常量池的作用"><a href="#运行时常量池的作用" class="headerlink" title="运行时常量池的作用"></a>运行时常量池的作用</h4><p>运行时常量池 <strong>是运行时数据区中方法区的一部分</strong>，受方法区内存限制，无法再申请内存时抛出OutOfMemoryError</p>
<p>Class文件中出了有类的版本、字段、方法、接口等描述信息外<strong>，还有一项是常量池表</strong>，<strong>用于存放编译器生成的各种字面量与符号引用</strong>，这部分内容在 **类加载之存放到运行时常量池</p>
<h4 id="常量池的好处"><a href="#常量池的好处" class="headerlink" title="常量池的好处"></a>常量池的好处</h4><p>常量池是为了避免频繁创建和销毁对象而影响系统系能，实现了对象的共享</p>
<ol>
<li>节省内存空间：常量池中所有相同的字符串常量被合并，只占用一个空间。</li>
<li>节省运行时间：比较字符串时 ==比equals要快。</li>
</ol>
<h3 id="什么是直接内存"><a href="#什么是直接内存" class="headerlink" title="什么是直接内存"></a>什么是直接内存</h3><p>直接内存，又称为堆外内存，NIO的Buffer提供了一个可以不经过JVM内存直接访问系统物理内存的类：<strong>DirectBuffer</strong>，DirectBuffer与普通的ByteBuffer不同，其直接分配在物理内存中，并不占用堆空间，其可以申请的最大内存受操作系统的限制，<strong>直接内存读写比普通Buffer快，但是创建销毁要比普通Buffer慢。</strong></p>
<p><strong>使用堆外内存的原因：</strong></p>
<ol>
<li>对垃圾回收停顿改善：使用堆外内存时可以保持较小的堆内内存规模，从而在GC时减少回收停顿对系统的影响</li>
<li>提升程序I/O操作的性能：通常再I/O通信中，通常会存在堆内内存和堆外内存的拷贝操作。</li>
</ol>
<h3 id="内存溢出-OOM"><a href="#内存溢出-OOM" class="headerlink" title="内存溢出(OOM)"></a>内存溢出(OOM)</h3><p><strong>内存溢出和内存泄露的区别：</strong></p>
<p>内存溢出OutOfMemory，指程序在申请内存时，没有足够的内存空间供其使用。</p>
<p>内存泄露，是指无用对象(不再使用的对象)持续占有内存或者内存得不到释放，从而导致内存空间的浪费称为内存泄露，内存泄漏最终会导致内存溢出。</p>
<blockquote>
<p><strong>原因场景：</strong>长生命周期的对象持有短生命周期对象的引用时就很可能发生内存泄露，尽管短生命周期的对象已经不在需要，但是因为长生命周期对象持有它的引用而导致不能回收，这就是Java中内存泄露的场景。</p>
</blockquote>
<p><strong>堆OOM：</strong>堆用于存储对象实例，当不断创建对象，并保证GC Roots到对象有可达路径 避免垃圾回收，随着对象数量的增加，总容量触及最大堆容量之后就会OOM，如一直在while循环中创建实例。</p>
<blockquote>
<p><strong>堆OOM的处理：</strong>通过内存映象分析工具对Dump出的堆转存储快照分析，确认是内存泄漏还是内存溢出</p>
<p>若是内存泄漏，通过工具查看泄漏对象到GC Roots的引用链，准确定位产生内存泄漏代码的具体位置</p>
<p>若不是内存泄漏，即内存中的所有对象都必须存活时，应当检查JVM堆参数，判断是否还有向上调整的空间，再检查是否存在某些对象生命周期过长，持有状态时间过长灯情况，尽量降低程序运行时的内存消耗。</p>
</blockquote>
<p><strong>栈OOM：</strong> 若线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverFlowerError，如果JVM栈可以动态扩展，当扩展无法申请到足够的内存时，会出现OOM</p>
<p><strong>方法区OOM</strong>：方法区主要存放类型信息，如类名，访问修饰符，常量值，方法描述等，只要在运行是不断产生大量的类，方法区就会溢出。<strong>如使用JDK反射或这CGLib直接操作字节码在运行时生成大量的类</strong>。</p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>java</tag>
      </tags>
  </entry>
</search>
